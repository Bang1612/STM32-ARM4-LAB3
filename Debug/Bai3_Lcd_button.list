
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004984  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b00  08007b00  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b08  08007b08  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007b10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009020  2**0
                  CONTENTS
 10 .bss          00000164  20000020  20000020  00009020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00009020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f465  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cdf  00000000  00000000  000184b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  0001b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba2  00000000  00000000  0001c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d73  00000000  00000000  0001cc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014cf2  00000000  00000000  0003f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf9d  00000000  00000000  000546e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122684  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003da8  00000000  00000000  001226c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00126470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004af4 	.word	0x08004af4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004af4 	.word	0x08004af4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2108      	movs	r1, #8
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <button_init+0x14>)
 80004d2:	f002 fafd 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40020c00 	.word	0x40020c00

080004e0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	482f      	ldr	r0, [pc, #188]	@ (80005a8 <button_Scan+0xc8>)
 80004ec:	f002 faf0 	bl	8002ad0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2108      	movs	r1, #8
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <button_Scan+0xc8>)
 80004f6:	f002 faeb 	bl	8002ad0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fa:	230a      	movs	r3, #10
 80004fc:	2202      	movs	r2, #2
 80004fe:	492b      	ldr	r1, [pc, #172]	@ (80005ac <button_Scan+0xcc>)
 8000500:	482b      	ldr	r0, [pc, #172]	@ (80005b0 <button_Scan+0xd0>)
 8000502:	f003 f930 	bl	8003766 <HAL_SPI_Receive>
	  int button_index = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e03f      	b.n	8000596 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db06      	blt.n	800052a <button_Scan+0x4a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dc03      	bgt.n	800052a <button_Scan+0x4a>
			  button_index = i + 4;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e018      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dd07      	ble.n	8000540 <button_Scan+0x60>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dc04      	bgt.n	8000540 <button_Scan+0x60>
			  button_index = 7 - i;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f1c3 0307 	rsb	r3, r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00d      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	dd06      	ble.n	8000554 <button_Scan+0x74>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	dc03      	bgt.n	8000554 <button_Scan+0x74>
			  button_index = i + 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1c3 0317 	rsb	r3, r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <button_Scan+0xcc>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	4013      	ands	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <button_Scan+0x96>
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <button_Scan+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2100      	movs	r1, #0
 8000570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000574:	e009      	b.n	800058a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800058a:	897b      	ldrh	r3, [r7, #10]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	ddbc      	ble.n	8000516 <button_Scan+0x36>
	  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	2000005c 	.word	0x2000005c
 80005b0:	200000e0 	.word	0x200000e0
 80005b4:	2000003c 	.word	0x2000003c

080005b8 <fsm_auto_run>:
	int RED_TIME = 5;
	int GREEN_TIME = 3;
	int YELLOW_TIME = 2;
}

void fsm_auto_run(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	switch (light_status){
 80005bc:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <fsm_auto_run+0xec>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d86b      	bhi.n	800069c <fsm_auto_run+0xe4>
 80005c4:	a201      	add	r2, pc, #4	@ (adr r2, 80005cc <fsm_auto_run+0x14>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	0800063d 	.word	0x0800063d
 80005d8:	0800066d 	.word	0x0800066d
	case RED_GREEN:
		lcd_TrafficLight(0, RED);
 80005dc:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e0:	2000      	movs	r0, #0
 80005e2:	f001 fa3d 	bl	8001a60 <lcd_TrafficLight>
		lcd_TrafficLight(1, GREEN);
 80005e6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f001 fa38 	bl	8001a60 <lcd_TrafficLight>
		setTimer2(GREEN_TIME * 1000);
 80005f0:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <fsm_auto_run+0xf0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	0152      	lsls	r2, r2, #5
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	4413      	add	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	b29b      	uxth	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fcdd 	bl	8001fc4 <setTimer2>
		break;
 800060a:	e048      	b.n	800069e <fsm_auto_run+0xe6>
	case RED_YELLOW:
		lcd_TrafficLight(0, RED);
 800060c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000610:	2000      	movs	r0, #0
 8000612:	f001 fa25 	bl	8001a60 <lcd_TrafficLight>
		lcd_TrafficLight(1, YELLOW);
 8000616:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800061a:	2001      	movs	r0, #1
 800061c:	f001 fa20 	bl	8001a60 <lcd_TrafficLight>
		setTimer2(YELLOW_TIME * 1000);
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <fsm_auto_run+0xf4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	0152      	lsls	r2, r2, #5
 800062a:	1ad2      	subs	r2, r2, r3
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	b29b      	uxth	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fcc5 	bl	8001fc4 <setTimer2>
		break;
 800063a:	e030      	b.n	800069e <fsm_auto_run+0xe6>
	case GREEN_RED:
		lcd_TrafficLight(0, GREEN);
 800063c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000640:	2000      	movs	r0, #0
 8000642:	f001 fa0d 	bl	8001a60 <lcd_TrafficLight>
		lcd_TrafficLight(1, RED);
 8000646:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800064a:	2001      	movs	r0, #1
 800064c:	f001 fa08 	bl	8001a60 <lcd_TrafficLight>
		setTimer2(GREEN_TIME * 1000);
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <fsm_auto_run+0xf0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	0152      	lsls	r2, r2, #5
 800065a:	1ad2      	subs	r2, r2, r3
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	4413      	add	r3, r2
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	b29b      	uxth	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fcad 	bl	8001fc4 <setTimer2>
		break;
 800066a:	e018      	b.n	800069e <fsm_auto_run+0xe6>
	case YELLOW_RED:
		lcd_TrafficLight(0, YELLOW);
 800066c:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8000670:	2000      	movs	r0, #0
 8000672:	f001 f9f5 	bl	8001a60 <lcd_TrafficLight>
		lcd_TrafficLight(1, RED);
 8000676:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800067a:	2001      	movs	r0, #1
 800067c:	f001 f9f0 	bl	8001a60 <lcd_TrafficLight>
		setTimer2(YELLOW_TIME * 1000);
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <fsm_auto_run+0xf4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	0152      	lsls	r2, r2, #5
 800068a:	1ad2      	subs	r2, r2, r3
 800068c:	0092      	lsls	r2, r2, #2
 800068e:	4413      	add	r3, r2
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	b29b      	uxth	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fc95 	bl	8001fc4 <setTimer2>
		break;
 800069a:	e000      	b.n	800069e <fsm_auto_run+0xe6>
	default:
		break;
 800069c:	bf00      	nop
	}
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000060 	.word	0x20000060
 80006a8:	20000004 	.word	0x20000004
 80006ac:	20000008 	.word	0x20000008

080006b0 <fsm_tuning_run>:


int status= 0;
int light_freq=0;
int temp;
void fsm_tuning_run(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af04      	add	r7, sp, #16
	switch (status) {
 80006b6:	4bb8      	ldr	r3, [pc, #736]	@ (8000998 <fsm_tuning_run+0x2e8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	f200 81f6 	bhi.w	8000aac <fsm_tuning_run+0x3fc>
 80006c0:	a201      	add	r2, pc, #4	@ (adr r2, 80006c8 <fsm_tuning_run+0x18>)
 80006c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c6:	bf00      	nop
 80006c8:	08000a87 	.word	0x08000a87
 80006cc:	080006d9 	.word	0x080006d9
 80006d0:	08000937 	.word	0x08000937
 80006d4:	08000809 	.word	0x08000809
	case MODIFICATION_RED:
//		int valRED = RED_TIME;
//		lcd_Clear(WHITE);
		lcd_DrawRectangle(10, 40, 59, 239, BLACK);
 80006d8:	2300      	movs	r3, #0
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	23ef      	movs	r3, #239	@ 0xef
 80006de:	223b      	movs	r2, #59	@ 0x3b
 80006e0:	2128      	movs	r1, #40	@ 0x28
 80006e2:	200a      	movs	r0, #10
 80006e4:	f000 fd09 	bl	80010fa <lcd_DrawRectangle>
		lcd_DrawRectangle(180, 40, 229, 239, BLACK);
 80006e8:	2300      	movs	r3, #0
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	23ef      	movs	r3, #239	@ 0xef
 80006ee:	22e5      	movs	r2, #229	@ 0xe5
 80006f0:	2128      	movs	r1, #40	@ 0x28
 80006f2:	20b4      	movs	r0, #180	@ 0xb4
 80006f4:	f000 fd01 	bl	80010fa <lcd_DrawRectangle>
		if (light_freq) lcd_DrawCircle(35, 65, RED, 5, 1);
 80006f8:	4ba8      	ldr	r3, [pc, #672]	@ (800099c <fsm_tuning_run+0x2ec>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <fsm_tuning_run+0x64>
 8000700:	2301      	movs	r3, #1
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2305      	movs	r3, #5
 8000706:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800070a:	2141      	movs	r1, #65	@ 0x41
 800070c:	2023      	movs	r0, #35	@ 0x23
 800070e:	f001 f8a4 	bl	800185a <lcd_DrawCircle>
 8000712:	e008      	b.n	8000726 <fsm_tuning_run+0x76>
		else lcd_DrawCircle(35, 65, GRAY, 5, 1);
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2305      	movs	r3, #5
 800071a:	f248 4230 	movw	r2, #33840	@ 0x8430
 800071e:	2141      	movs	r1, #65	@ 0x41
 8000720:	2023      	movs	r0, #35	@ 0x23
 8000722:	f001 f89a 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(35, 90, GRAY, 5, 1);
 8000726:	2301      	movs	r3, #1
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2305      	movs	r3, #5
 800072c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000730:	215a      	movs	r1, #90	@ 0x5a
 8000732:	2023      	movs	r0, #35	@ 0x23
 8000734:	f001 f891 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(35, 115, GRAY, 5, 1);
 8000738:	2301      	movs	r3, #1
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2305      	movs	r3, #5
 800073e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000742:	2173      	movs	r1, #115	@ 0x73
 8000744:	2023      	movs	r0, #35	@ 0x23
 8000746:	f001 f888 	bl	800185a <lcd_DrawCircle>


		if (light_freq) lcd_DrawCircle(205, 65, RED, 5, 1);
 800074a:	4b94      	ldr	r3, [pc, #592]	@ (800099c <fsm_tuning_run+0x2ec>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d009      	beq.n	8000766 <fsm_tuning_run+0xb6>
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2305      	movs	r3, #5
 8000758:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800075c:	2141      	movs	r1, #65	@ 0x41
 800075e:	20cd      	movs	r0, #205	@ 0xcd
 8000760:	f001 f87b 	bl	800185a <lcd_DrawCircle>
 8000764:	e008      	b.n	8000778 <fsm_tuning_run+0xc8>
		else lcd_DrawCircle(205, 65, GRAY, 5, 1);
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2305      	movs	r3, #5
 800076c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000770:	2141      	movs	r1, #65	@ 0x41
 8000772:	20cd      	movs	r0, #205	@ 0xcd
 8000774:	f001 f871 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(205, 90, GRAY, 5, 1);
 8000778:	2301      	movs	r3, #1
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2305      	movs	r3, #5
 800077e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000782:	215a      	movs	r1, #90	@ 0x5a
 8000784:	20cd      	movs	r0, #205	@ 0xcd
 8000786:	f001 f868 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(205, 115, GRAY, 5, 1);
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2305      	movs	r3, #5
 8000790:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000794:	2173      	movs	r1, #115	@ 0x73
 8000796:	20cd      	movs	r0, #205	@ 0xcd
 8000798:	f001 f85f 	bl	800185a <lcd_DrawCircle>
		lcd_StrCenter(10, 15, "MODIFICATION RED", RED, BLUE, 16, 0);
 800079c:	2300      	movs	r3, #0
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2310      	movs	r3, #16
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	231f      	movs	r3, #31
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007ac:	4a7c      	ldr	r2, [pc, #496]	@ (80009a0 <fsm_tuning_run+0x2f0>)
 80007ae:	210f      	movs	r1, #15
 80007b0:	200a      	movs	r0, #10
 80007b2:	f001 f923 	bl	80019fc <lcd_StrCenter>


		if (button_count[1] == 1) {
 80007b6:	4b7b      	ldr	r3, [pc, #492]	@ (80009a4 <fsm_tuning_run+0x2f4>)
 80007b8:	885b      	ldrh	r3, [r3, #2]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d10b      	bne.n	80007d6 <fsm_tuning_run+0x126>
			temp++;
 80007be:	4b7a      	ldr	r3, [pc, #488]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a78      	ldr	r2, [pc, #480]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80007c6:	6013      	str	r3, [r2, #0]
			if (temp > 99)
 80007c8:	4b77      	ldr	r3, [pc, #476]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b63      	cmp	r3, #99	@ 0x63
 80007ce:	dd02      	ble.n	80007d6 <fsm_tuning_run+0x126>
				temp = 1;
 80007d0:	4b75      	ldr	r3, [pc, #468]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
		}
		if (button_count[2] == 1) {
 80007d6:	4b73      	ldr	r3, [pc, #460]	@ (80009a4 <fsm_tuning_run+0x2f4>)
 80007d8:	889b      	ldrh	r3, [r3, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d103      	bne.n	80007e6 <fsm_tuning_run+0x136>
			RED_TIME = temp;
 80007de:	4b72      	ldr	r3, [pc, #456]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a72      	ldr	r2, [pc, #456]	@ (80009ac <fsm_tuning_run+0x2fc>)
 80007e4:	6013      	str	r3, [r2, #0]
		}
		lcd_ShowIntNum(120, 60, temp, 2, RED, WHITE, 16);
 80007e6:	4b70      	ldr	r3, [pc, #448]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	2310      	movs	r3, #16
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	213c      	movs	r1, #60	@ 0x3c
 8000800:	2078      	movs	r0, #120	@ 0x78
 8000802:	f000 fd9d 	bl	8001340 <lcd_ShowIntNum>
		break;
 8000806:	e154      	b.n	8000ab2 <fsm_tuning_run+0x402>
	case MODIFICATION_YELLOW:
//		int valYEL = YELLOW_TIME;
//		lcd_Clear(WHITE);
		lcd_DrawRectangle(10, 40, 59, 239, BLACK);
 8000808:	2300      	movs	r3, #0
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	23ef      	movs	r3, #239	@ 0xef
 800080e:	223b      	movs	r2, #59	@ 0x3b
 8000810:	2128      	movs	r1, #40	@ 0x28
 8000812:	200a      	movs	r0, #10
 8000814:	f000 fc71 	bl	80010fa <lcd_DrawRectangle>
		lcd_DrawRectangle(180, 40, 229, 239, BLACK);
 8000818:	2300      	movs	r3, #0
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	23ef      	movs	r3, #239	@ 0xef
 800081e:	22e5      	movs	r2, #229	@ 0xe5
 8000820:	2128      	movs	r1, #40	@ 0x28
 8000822:	20b4      	movs	r0, #180	@ 0xb4
 8000824:	f000 fc69 	bl	80010fa <lcd_DrawRectangle>
		lcd_DrawCircle(35, 65, GRAY, 5, 1);
 8000828:	2301      	movs	r3, #1
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2305      	movs	r3, #5
 800082e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000832:	2141      	movs	r1, #65	@ 0x41
 8000834:	2023      	movs	r0, #35	@ 0x23
 8000836:	f001 f810 	bl	800185a <lcd_DrawCircle>
		if (light_freq) lcd_DrawCircle(35, 90, YELLOW, 5, 1);
 800083a:	4b58      	ldr	r3, [pc, #352]	@ (800099c <fsm_tuning_run+0x2ec>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d009      	beq.n	8000856 <fsm_tuning_run+0x1a6>
 8000842:	2301      	movs	r3, #1
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2305      	movs	r3, #5
 8000848:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800084c:	215a      	movs	r1, #90	@ 0x5a
 800084e:	2023      	movs	r0, #35	@ 0x23
 8000850:	f001 f803 	bl	800185a <lcd_DrawCircle>
 8000854:	e008      	b.n	8000868 <fsm_tuning_run+0x1b8>
		else lcd_DrawCircle(35, 90, GRAY, 5, 1);
 8000856:	2301      	movs	r3, #1
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2305      	movs	r3, #5
 800085c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000860:	215a      	movs	r1, #90	@ 0x5a
 8000862:	2023      	movs	r0, #35	@ 0x23
 8000864:	f000 fff9 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(35, 115, GRAY, 5, 1);
 8000868:	2301      	movs	r3, #1
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2305      	movs	r3, #5
 800086e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000872:	2173      	movs	r1, #115	@ 0x73
 8000874:	2023      	movs	r0, #35	@ 0x23
 8000876:	f000 fff0 	bl	800185a <lcd_DrawCircle>

		lcd_DrawCircle(205, 65, GRAY, 5, 1);
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2305      	movs	r3, #5
 8000880:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000884:	2141      	movs	r1, #65	@ 0x41
 8000886:	20cd      	movs	r0, #205	@ 0xcd
 8000888:	f000 ffe7 	bl	800185a <lcd_DrawCircle>
		if (light_freq) lcd_DrawCircle(205, 90, YELLOW, 5, 1);
 800088c:	4b43      	ldr	r3, [pc, #268]	@ (800099c <fsm_tuning_run+0x2ec>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d009      	beq.n	80008a8 <fsm_tuning_run+0x1f8>
 8000894:	2301      	movs	r3, #1
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2305      	movs	r3, #5
 800089a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800089e:	215a      	movs	r1, #90	@ 0x5a
 80008a0:	20cd      	movs	r0, #205	@ 0xcd
 80008a2:	f000 ffda 	bl	800185a <lcd_DrawCircle>
 80008a6:	e008      	b.n	80008ba <fsm_tuning_run+0x20a>
		else lcd_DrawCircle(205, 90, GRAY, 5, 1);
 80008a8:	2301      	movs	r3, #1
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2305      	movs	r3, #5
 80008ae:	f248 4230 	movw	r2, #33840	@ 0x8430
 80008b2:	215a      	movs	r1, #90	@ 0x5a
 80008b4:	20cd      	movs	r0, #205	@ 0xcd
 80008b6:	f000 ffd0 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(205, 115, GRAY, 5, 1);
 80008ba:	2301      	movs	r3, #1
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2305      	movs	r3, #5
 80008c0:	f248 4230 	movw	r2, #33840	@ 0x8430
 80008c4:	2173      	movs	r1, #115	@ 0x73
 80008c6:	20cd      	movs	r0, #205	@ 0xcd
 80008c8:	f000 ffc7 	bl	800185a <lcd_DrawCircle>
		lcd_StrCenter(10, 15, "MODIFICATION YELLOW", RED, BLUE, 16, 0);
 80008cc:	2300      	movs	r3, #0
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2310      	movs	r3, #16
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	231f      	movs	r3, #31
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008dc:	4a34      	ldr	r2, [pc, #208]	@ (80009b0 <fsm_tuning_run+0x300>)
 80008de:	210f      	movs	r1, #15
 80008e0:	200a      	movs	r0, #10
 80008e2:	f001 f88b 	bl	80019fc <lcd_StrCenter>


		if (button_count[1] == 1) {
 80008e6:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <fsm_tuning_run+0x2f4>)
 80008e8:	885b      	ldrh	r3, [r3, #2]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d10b      	bne.n	8000906 <fsm_tuning_run+0x256>
			temp++;
 80008ee:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a2c      	ldr	r2, [pc, #176]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80008f6:	6013      	str	r3, [r2, #0]
			if (temp > 99)
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b63      	cmp	r3, #99	@ 0x63
 80008fe:	dd02      	ble.n	8000906 <fsm_tuning_run+0x256>
				temp = 1;
 8000900:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		}
		if (button_count[2] == 1) {
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <fsm_tuning_run+0x2f4>)
 8000908:	889b      	ldrh	r3, [r3, #4]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d103      	bne.n	8000916 <fsm_tuning_run+0x266>
			YELLOW_TIME = temp;
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a28      	ldr	r2, [pc, #160]	@ (80009b4 <fsm_tuning_run+0x304>)
 8000914:	6013      	str	r3, [r2, #0]
		}
		lcd_ShowIntNum(120, 60, temp, 2, YELLOW, BLACK, 16);
 8000916:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <fsm_tuning_run+0x2f8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	b29a      	uxth	r2, r3
 800091c:	2310      	movs	r3, #16
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	2300      	movs	r3, #0
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2302      	movs	r3, #2
 800092c:	213c      	movs	r1, #60	@ 0x3c
 800092e:	2078      	movs	r0, #120	@ 0x78
 8000930:	f000 fd06 	bl	8001340 <lcd_ShowIntNum>
		break;
 8000934:	e0bd      	b.n	8000ab2 <fsm_tuning_run+0x402>
	case MODIFICATION_GREEN:
//		int valGRE = GREEN_TIME;
//		lcd_Clear(WHITE);
		lcd_DrawRectangle(10, 40, 59, 239, BLACK);
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	23ef      	movs	r3, #239	@ 0xef
 800093c:	223b      	movs	r2, #59	@ 0x3b
 800093e:	2128      	movs	r1, #40	@ 0x28
 8000940:	200a      	movs	r0, #10
 8000942:	f000 fbda 	bl	80010fa <lcd_DrawRectangle>
		lcd_DrawRectangle(180, 40, 229, 239, BLACK);
 8000946:	2300      	movs	r3, #0
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	23ef      	movs	r3, #239	@ 0xef
 800094c:	22e5      	movs	r2, #229	@ 0xe5
 800094e:	2128      	movs	r1, #40	@ 0x28
 8000950:	20b4      	movs	r0, #180	@ 0xb4
 8000952:	f000 fbd2 	bl	80010fa <lcd_DrawRectangle>
		lcd_DrawCircle(35, 65, GRAY, 5, 1);
 8000956:	2301      	movs	r3, #1
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2305      	movs	r3, #5
 800095c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000960:	2141      	movs	r1, #65	@ 0x41
 8000962:	2023      	movs	r0, #35	@ 0x23
 8000964:	f000 ff79 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(35, 90, GRAY, 5, 1);
 8000968:	2301      	movs	r3, #1
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2305      	movs	r3, #5
 800096e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000972:	215a      	movs	r1, #90	@ 0x5a
 8000974:	2023      	movs	r0, #35	@ 0x23
 8000976:	f000 ff70 	bl	800185a <lcd_DrawCircle>
		if (light_freq) lcd_DrawCircle(35, 115, GREEN, 5, 1);
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <fsm_tuning_run+0x2ec>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d01a      	beq.n	80009b8 <fsm_tuning_run+0x308>
 8000982:	2301      	movs	r3, #1
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2305      	movs	r3, #5
 8000988:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800098c:	2173      	movs	r1, #115	@ 0x73
 800098e:	2023      	movs	r0, #35	@ 0x23
 8000990:	f000 ff63 	bl	800185a <lcd_DrawCircle>
 8000994:	e019      	b.n	80009ca <fsm_tuning_run+0x31a>
 8000996:	bf00      	nop
 8000998:	20000064 	.word	0x20000064
 800099c:	20000068 	.word	0x20000068
 80009a0:	08004b0c 	.word	0x08004b0c
 80009a4:	2000003c 	.word	0x2000003c
 80009a8:	2000006c 	.word	0x2000006c
 80009ac:	20000000 	.word	0x20000000
 80009b0:	08004b20 	.word	0x08004b20
 80009b4:	20000008 	.word	0x20000008
		else lcd_DrawCircle(35, 115, GRAY, 5, 1);
 80009b8:	2301      	movs	r3, #1
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2305      	movs	r3, #5
 80009be:	f248 4230 	movw	r2, #33840	@ 0x8430
 80009c2:	2173      	movs	r1, #115	@ 0x73
 80009c4:	2023      	movs	r0, #35	@ 0x23
 80009c6:	f000 ff48 	bl	800185a <lcd_DrawCircle>

		lcd_DrawCircle(205, 65, GRAY, 5, 1);
 80009ca:	2301      	movs	r3, #1
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2305      	movs	r3, #5
 80009d0:	f248 4230 	movw	r2, #33840	@ 0x8430
 80009d4:	2141      	movs	r1, #65	@ 0x41
 80009d6:	20cd      	movs	r0, #205	@ 0xcd
 80009d8:	f000 ff3f 	bl	800185a <lcd_DrawCircle>
		lcd_DrawCircle(205, 90, GRAY, 5, 1);
 80009dc:	2301      	movs	r3, #1
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2305      	movs	r3, #5
 80009e2:	f248 4230 	movw	r2, #33840	@ 0x8430
 80009e6:	215a      	movs	r1, #90	@ 0x5a
 80009e8:	20cd      	movs	r0, #205	@ 0xcd
 80009ea:	f000 ff36 	bl	800185a <lcd_DrawCircle>
		if (light_freq) lcd_DrawCircle(205, 115, GREEN, 5, 1);
 80009ee:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <fsm_tuning_run+0x408>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <fsm_tuning_run+0x35a>
 80009f6:	2301      	movs	r3, #1
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2305      	movs	r3, #5
 80009fc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000a00:	2173      	movs	r1, #115	@ 0x73
 8000a02:	20cd      	movs	r0, #205	@ 0xcd
 8000a04:	f000 ff29 	bl	800185a <lcd_DrawCircle>
 8000a08:	e008      	b.n	8000a1c <fsm_tuning_run+0x36c>
		else lcd_DrawCircle(205, 115, GRAY, 5, 1);
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2305      	movs	r3, #5
 8000a10:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000a14:	2173      	movs	r1, #115	@ 0x73
 8000a16:	20cd      	movs	r0, #205	@ 0xcd
 8000a18:	f000 ff1f 	bl	800185a <lcd_DrawCircle>
		lcd_StrCenter(10, 15, "MODIFICATION GREEN", RED, BLUE, 16, 0);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	2310      	movs	r3, #16
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	231f      	movs	r3, #31
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a2c:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <fsm_tuning_run+0x40c>)
 8000a2e:	210f      	movs	r1, #15
 8000a30:	200a      	movs	r0, #10
 8000a32:	f000 ffe3 	bl	80019fc <lcd_StrCenter>

		if (button_count[1] == 1) {
 8000a36:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <fsm_tuning_run+0x410>)
 8000a38:	885b      	ldrh	r3, [r3, #2]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10b      	bne.n	8000a56 <fsm_tuning_run+0x3a6>
			temp++;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <fsm_tuning_run+0x414>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <fsm_tuning_run+0x414>)
 8000a46:	6013      	str	r3, [r2, #0]
			if (temp > 99)
 8000a48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <fsm_tuning_run+0x414>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b63      	cmp	r3, #99	@ 0x63
 8000a4e:	dd02      	ble.n	8000a56 <fsm_tuning_run+0x3a6>
				temp = 1;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <fsm_tuning_run+0x414>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
		}
		if (button_count[2] == 1) {
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <fsm_tuning_run+0x410>)
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d103      	bne.n	8000a66 <fsm_tuning_run+0x3b6>
			GREEN_TIME = temp;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <fsm_tuning_run+0x414>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <fsm_tuning_run+0x418>)
 8000a64:	6013      	str	r3, [r2, #0]
		}
		lcd_ShowIntNum(120, 60, temp, 2, GREEN, BLACK, 16);
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <fsm_tuning_run+0x414>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2300      	movs	r3, #0
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	213c      	movs	r1, #60	@ 0x3c
 8000a7e:	2078      	movs	r0, #120	@ 0x78
 8000a80:	f000 fc5e 	bl	8001340 <lcd_ShowIntNum>

		break;
 8000a84:	e015      	b.n	8000ab2 <fsm_tuning_run+0x402>
	case NORMAL:
		if(RED_TIME != GREEN_TIME + YELLOW_TIME){
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <fsm_tuning_run+0x418>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <fsm_tuning_run+0x41c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	441a      	add	r2, r3
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <fsm_tuning_run+0x420>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d00b      	beq.n	8000ab0 <fsm_tuning_run+0x400>
			RED_TIME=5;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <fsm_tuning_run+0x420>)
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	601a      	str	r2, [r3, #0]
			GREEN_TIME=3;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <fsm_tuning_run+0x418>)
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	601a      	str	r2, [r3, #0]
			YELLOW_TIME=2;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <fsm_tuning_run+0x41c>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	601a      	str	r2, [r3, #0]
		}
//		fsm_auto_run();
		break;
 8000aaa:	e001      	b.n	8000ab0 <fsm_tuning_run+0x400>


		default:
			break;
 8000aac:	bf00      	nop
 8000aae:	e000      	b.n	8000ab2 <fsm_tuning_run+0x402>
		break;
 8000ab0:	bf00      	nop

	}
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000068 	.word	0x20000068
 8000abc:	08004b34 	.word	0x08004b34
 8000ac0:	2000003c 	.word	0x2000003c
 8000ac4:	2000006c 	.word	0x2000006c
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	@ 0x38
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000b00:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b02:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000b06:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc4 <MX_FSMC_Init+0xf0>)
 8000b0c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b14:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b1a:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000b66:	230f      	movs	r3, #15
 8000b68:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000b6e:	233c      	movs	r3, #60	@ 0x3c
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000b76:	2310      	movs	r3, #16
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000b7a:	2311      	movs	r3, #17
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000b82:	2308      	movs	r3, #8
 8000b84:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000b86:	230f      	movs	r3, #15
 8000b88:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000b8a:	2309      	movs	r3, #9
 8000b8c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000b92:	2310      	movs	r3, #16
 8000b94:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000b96:	2311      	movs	r3, #17
 8000b98:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000b9e:	463a      	mov	r2, r7
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <MX_FSMC_Init+0xec>)
 8000ba8:	f003 f9e2 	bl	8003f70 <HAL_SRAM_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000bb2:	f001 f9f7 	bl	8001fa4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	@ 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000070 	.word	0x20000070
 8000bc4:	a0000104 	.word	0xa0000104

08000bc8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_FSMC_MspInit+0x88>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d131      	bne.n	8000c48 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_FSMC_MspInit+0x88>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_FSMC_MspInit+0x8c>)
 8000bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <HAL_FSMC_MspInit+0x8c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_FSMC_MspInit+0x8c>)
 8000bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000c06:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000c0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <HAL_FSMC_MspInit+0x90>)
 8000c22:	f001 fdb9 	bl	8002798 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000c26:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000c2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <HAL_FSMC_MspInit+0x94>)
 8000c42:	f001 fda9 	bl	8002798 <HAL_GPIO_Init>
 8000c46:	e000      	b.n	8000c4a <HAL_FSMC_MspInit+0x82>
    return;
 8000c48:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000c0 	.word	0x200000c0
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020c00 	.word	0x40020c00

08000c60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c68:	f7ff ffae 	bl	8000bc8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a6e      	ldr	r2, [pc, #440]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	4b68      	ldr	r3, [pc, #416]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a67      	ldr	r2, [pc, #412]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b65      	ldr	r3, [pc, #404]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b61      	ldr	r3, [pc, #388]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a60      	ldr	r2, [pc, #384]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a59      	ldr	r2, [pc, #356]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b57      	ldr	r3, [pc, #348]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b53      	ldr	r3, [pc, #332]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a52      	ldr	r2, [pc, #328]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b50      	ldr	r3, [pc, #320]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b49      	ldr	r3, [pc, #292]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a44      	ldr	r2, [pc, #272]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <MX_GPIO_Init+0x1d8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2170      	movs	r1, #112	@ 0x70
 8000d52:	483f      	ldr	r0, [pc, #252]	@ (8000e50 <MX_GPIO_Init+0x1dc>)
 8000d54:	f001 febc 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5e:	483d      	ldr	r0, [pc, #244]	@ (8000e54 <MX_GPIO_Init+0x1e0>)
 8000d60:	f001 feb6 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2140      	movs	r1, #64	@ 0x40
 8000d68:	483b      	ldr	r0, [pc, #236]	@ (8000e58 <MX_GPIO_Init+0x1e4>)
 8000d6a:	f001 feb1 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d74:	4839      	ldr	r0, [pc, #228]	@ (8000e5c <MX_GPIO_Init+0x1e8>)
 8000d76:	f001 feab 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4838      	ldr	r0, [pc, #224]	@ (8000e60 <MX_GPIO_Init+0x1ec>)
 8000d80:	f001 fea6 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000d84:	2370      	movs	r3, #112	@ 0x70
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	482d      	ldr	r0, [pc, #180]	@ (8000e50 <MX_GPIO_Init+0x1dc>)
 8000d9c:	f001 fcfc 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000da0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4826      	ldr	r0, [pc, #152]	@ (8000e54 <MX_GPIO_Init+0x1e0>)
 8000dba:	f001 fced 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000dbe:	23c0      	movs	r3, #192	@ 0xc0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4822      	ldr	r0, [pc, #136]	@ (8000e5c <MX_GPIO_Init+0x1e8>)
 8000dd2:	f001 fce1 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000dd6:	2330      	movs	r3, #48	@ 0x30
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	481a      	ldr	r0, [pc, #104]	@ (8000e54 <MX_GPIO_Init+0x1e0>)
 8000dea:	f001 fcd5 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000dee:	2340      	movs	r3, #64	@ 0x40
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <MX_GPIO_Init+0x1e4>)
 8000e06:	f001 fcc7 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <MX_GPIO_Init+0x1e8>)
 8000e24:	f001 fcb8 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <MX_GPIO_Init+0x1ec>)
 8000e40:	f001 fcaa 	bl	8002798 <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	@ 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020c00 	.word	0x40020c00

08000e64 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <LCD_WR_REG+0x1c>)
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	8013      	strh	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	600ffffe 	.word	0x600ffffe

08000e84 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <LCD_WR_DATA+0x1c>)
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	8053      	strh	r3, [r2, #2]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	600ffffe 	.word	0x600ffffe

08000ea4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <LCD_RD_DATA+0x20>)
 8000eac:	885b      	ldrh	r3, [r3, #2]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	b29b      	uxth	r3, r3
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	600ffffe 	.word	0x600ffffe

08000ec8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	4603      	mov	r3, r0
 8000edc:	80bb      	strh	r3, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000ee6:	202a      	movs	r0, #42	@ 0x2a
 8000ee8:	f7ff ffbc 	bl	8000e64 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffc6 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ffc0 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffba 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffb4 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000f1c:	202b      	movs	r0, #43	@ 0x2b
 8000f1e:	f7ff ffa1 	bl	8000e64 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffab 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ffa5 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff9f 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000f46:	883b      	ldrh	r3, [r7, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff99 	bl	8000e84 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000f52:	202c      	movs	r0, #44	@ 0x2c
 8000f54:	f7ff ff86 	bl	8000e64 <LCD_WR_REG>
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}

08000f60 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <lcd_Clear+0x60>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <lcd_Clear+0x60>)
 8000f74:	885b      	ldrh	r3, [r3, #2]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ffa3 	bl	8000ec8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	81fb      	strh	r3, [r7, #14]
 8000f86:	e011      	b.n	8000fac <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	81bb      	strh	r3, [r7, #12]
 8000f8c:	e006      	b.n	8000f9c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff77 	bl	8000e84 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f96:	89bb      	ldrh	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	81bb      	strh	r3, [r7, #12]
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <lcd_Clear+0x60>)
 8000f9e:	885b      	ldrh	r3, [r3, #2]
 8000fa0:	89ba      	ldrh	r2, [r7, #12]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3f3      	bcc.n	8000f8e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	81fb      	strh	r3, [r7, #14]
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <lcd_Clear+0x60>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	89fa      	ldrh	r2, [r7, #14]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3e8      	bcc.n	8000f88 <lcd_Clear+0x28>
		}
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000c4 	.word	0x200000c4

08000fc4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	88b9      	ldrh	r1, [r7, #4]
 8000fdc:	88f8      	ldrh	r0, [r7, #6]
 8000fde:	f7ff ff73 	bl	8000ec8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff4d 	bl	8000e84 <LCD_WR_DATA>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b08d      	sub	sp, #52	@ 0x34
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	461a      	mov	r2, r3
 8001000:	4623      	mov	r3, r4
 8001002:	80fb      	strh	r3, [r7, #6]
 8001004:	4603      	mov	r3, r0
 8001006:	80bb      	strh	r3, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001020:	883a      	ldrh	r2, [r7, #0]
 8001022:	88bb      	ldrh	r3, [r7, #4]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dd02      	ble.n	800103c <lcd_DrawLine+0x4a>
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e00b      	b.n	8001054 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <lcd_DrawLine+0x56>
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e005      	b.n	8001054 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	425b      	negs	r3, r3
 8001052:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd02      	ble.n	8001060 <lcd_DrawLine+0x6e>
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	e00b      	b.n	8001078 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <lcd_DrawLine+0x7a>
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	e005      	b.n	8001078 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	425b      	negs	r3, r3
 8001076:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001078:	6a3a      	ldr	r2, [r7, #32]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	dd02      	ble.n	8001086 <lcd_DrawLine+0x94>
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	e001      	b.n	800108a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800108a:	2300      	movs	r3, #0
 800108c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800108e:	e02b      	b.n	80010e8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b29b      	uxth	r3, r3
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	b291      	uxth	r1, r2
 8001098:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff91 	bl	8000fc4 <lcd_DrawPoint>
		xerr+=delta_x;
 80010a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 80010aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80010b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dd07      	ble.n	80010ca <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80010ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80010ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dd07      	ble.n	80010e2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80010d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4413      	add	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80010e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80010e4:	3301      	adds	r3, #1
 80010e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80010e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dacf      	bge.n	8001090 <lcd_DrawLine+0x9e>
		}
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3734      	adds	r7, #52	@ 0x34
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}

080010fa <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80010fa:	b590      	push	{r4, r7, lr}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af02      	add	r7, sp, #8
 8001100:	4604      	mov	r4, r0
 8001102:	4608      	mov	r0, r1
 8001104:	4611      	mov	r1, r2
 8001106:	461a      	mov	r2, r3
 8001108:	4623      	mov	r3, r4
 800110a:	80fb      	strh	r3, [r7, #6]
 800110c:	4603      	mov	r3, r0
 800110e:	80bb      	strh	r3, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001118:	88bc      	ldrh	r4, [r7, #4]
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	88b9      	ldrh	r1, [r7, #4]
 800111e:	88f8      	ldrh	r0, [r7, #6]
 8001120:	8b3b      	ldrh	r3, [r7, #24]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4623      	mov	r3, r4
 8001126:	f7ff ff64 	bl	8000ff2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800112a:	883c      	ldrh	r4, [r7, #0]
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	88b9      	ldrh	r1, [r7, #4]
 8001130:	88f8      	ldrh	r0, [r7, #6]
 8001132:	8b3b      	ldrh	r3, [r7, #24]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4623      	mov	r3, r4
 8001138:	f7ff ff5b 	bl	8000ff2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800113c:	883c      	ldrh	r4, [r7, #0]
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	8839      	ldrh	r1, [r7, #0]
 8001142:	88f8      	ldrh	r0, [r7, #6]
 8001144:	8b3b      	ldrh	r3, [r7, #24]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4623      	mov	r3, r4
 800114a:	f7ff ff52 	bl	8000ff2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800114e:	883c      	ldrh	r4, [r7, #0]
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	88b9      	ldrh	r1, [r7, #4]
 8001154:	8878      	ldrh	r0, [r7, #2]
 8001156:	8b3b      	ldrh	r3, [r7, #24]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4623      	mov	r3, r4
 800115c:	f7ff ff49 	bl	8000ff2 <lcd_DrawLine>
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001186:	2300      	movs	r3, #0
 8001188:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800118e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	fb12 f303 	smulbb	r3, r2, r3
 80011be:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	3b20      	subs	r3, #32
 80011c4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29c      	uxth	r4, r3
 80011d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011d8:	b29a      	uxth	r2, r3
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	88b9      	ldrh	r1, [r7, #4]
 80011e6:	88f8      	ldrh	r0, [r7, #6]
 80011e8:	4622      	mov	r2, r4
 80011ea:	f7ff fe6d 	bl	8000ec8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	827b      	strh	r3, [r7, #18]
 80011f2:	e07a      	b.n	80012ea <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80011f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	d028      	beq.n	800124e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80011fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001200:	2b10      	cmp	r3, #16
 8001202:	d108      	bne.n	8001216 <lcd_ShowChar+0xae>
 8001204:	78fa      	ldrb	r2, [r7, #3]
 8001206:	8a7b      	ldrh	r3, [r7, #18]
 8001208:	493c      	ldr	r1, [pc, #240]	@ (80012fc <lcd_ShowChar+0x194>)
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	440a      	add	r2, r1
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	75fb      	strb	r3, [r7, #23]
 8001214:	e01b      	b.n	800124e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001216:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800121a:	2b18      	cmp	r3, #24
 800121c:	d10b      	bne.n	8001236 <lcd_ShowChar+0xce>
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	8a79      	ldrh	r1, [r7, #18]
 8001222:	4837      	ldr	r0, [pc, #220]	@ (8001300 <lcd_ShowChar+0x198>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4403      	add	r3, r0
 800122e:	440b      	add	r3, r1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	75fb      	strb	r3, [r7, #23]
 8001234:	e00b      	b.n	800124e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001236:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800123a:	2b20      	cmp	r3, #32
 800123c:	d15a      	bne.n	80012f4 <lcd_ShowChar+0x18c>
 800123e:	78fa      	ldrb	r2, [r7, #3]
 8001240:	8a7b      	ldrh	r3, [r7, #18]
 8001242:	4930      	ldr	r1, [pc, #192]	@ (8001304 <lcd_ShowChar+0x19c>)
 8001244:	0192      	lsls	r2, r2, #6
 8001246:	440a      	add	r2, r1
 8001248:	4413      	add	r3, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800124e:	2300      	movs	r3, #0
 8001250:	75bb      	strb	r3, [r7, #22]
 8001252:	e044      	b.n	80012de <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001254:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001258:	2b00      	cmp	r3, #0
 800125a:	d120      	bne.n	800129e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800125c:	7dfa      	ldrb	r2, [r7, #23]
 800125e:	7dbb      	ldrb	r3, [r7, #22]
 8001260:	fa42 f303 	asr.w	r3, r2, r3
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <lcd_ShowChar+0x10e>
 800126c:	883b      	ldrh	r3, [r7, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe08 	bl	8000e84 <LCD_WR_DATA>
 8001274:	e003      	b.n	800127e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001276:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe03 	bl	8000e84 <LCD_WR_DATA>
				m++;
 800127e:	7d7b      	ldrb	r3, [r7, #21]
 8001280:	3301      	adds	r3, #1
 8001282:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001284:	7d7b      	ldrb	r3, [r7, #21]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	fbb3 f1f2 	udiv	r1, r3, r2
 800128c:	fb01 f202 	mul.w	r2, r1, r2
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11f      	bne.n	80012d8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001298:	2300      	movs	r3, #0
 800129a:	757b      	strb	r3, [r7, #21]
					break;
 800129c:	e022      	b.n	80012e4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800129e:	7dfa      	ldrb	r2, [r7, #23]
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	fa42 f303 	asr.w	r3, r2, r3
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <lcd_ShowChar+0x152>
 80012ae:	883a      	ldrh	r2, [r7, #0]
 80012b0:	88b9      	ldrh	r1, [r7, #4]
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe85 	bl	8000fc4 <lcd_DrawPoint>
				x++;
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	3301      	adds	r3, #1
 80012be:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80012c0:	88fa      	ldrh	r2, [r7, #6]
 80012c2:	8a3b      	ldrh	r3, [r7, #16]
 80012c4:	1ad2      	subs	r2, r2, r3
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d105      	bne.n	80012d8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80012cc:	8a3b      	ldrh	r3, [r7, #16]
 80012ce:	80fb      	strh	r3, [r7, #6]
					y++;
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	80bb      	strh	r3, [r7, #4]
					break;
 80012d6:	e005      	b.n	80012e4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	3301      	adds	r3, #1
 80012dc:	75bb      	strb	r3, [r7, #22]
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	d9b7      	bls.n	8001254 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80012e4:	8a7b      	ldrh	r3, [r7, #18]
 80012e6:	3301      	adds	r3, #1
 80012e8:	827b      	strh	r3, [r7, #18]
 80012ea:	8a7a      	ldrh	r2, [r7, #18]
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d380      	bcc.n	80011f4 <lcd_ShowChar+0x8c>
 80012f2:	e000      	b.n	80012f6 <lcd_ShowChar+0x18e>
		else return;
 80012f4:	bf00      	nop
				}
			}
		}
	}
}
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	08004b70 	.word	0x08004b70
 8001300:	08005160 	.word	0x08005160
 8001304:	08006330 	.word	0x08006330

08001308 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	460a      	mov	r2, r1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800131c:	e004      	b.n	8001328 <mypow+0x20>
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	71ba      	strb	r2, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f5      	bne.n	800131e <mypow+0x16>
	return result;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af04      	add	r7, sp, #16
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	4603      	mov	r3, r0
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800135e:	2300      	movs	r3, #0
 8001360:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001362:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e059      	b.n	8001424 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001370:	887c      	ldrh	r4, [r7, #2]
 8001372:	787a      	ldrb	r2, [r7, #1]
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	200a      	movs	r0, #10
 8001382:	f7ff ffc1 	bl	8001308 <mypow>
 8001386:	4603      	mov	r3, r0
 8001388:	fbb4 f1f3 	udiv	r1, r4, r3
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <lcd_ShowIntNum+0xf8>)
 800138e:	fba3 2301 	umull	r2, r3, r3, r1
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	1aca      	subs	r2, r1, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d121      	bne.n	80013ec <lcd_ShowIntNum+0xac>
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	787b      	ldrb	r3, [r7, #1]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	429a      	cmp	r2, r3
 80013b0:	da1c      	bge.n	80013ec <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80013b2:	7b3b      	ldrb	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d117      	bne.n	80013e8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	fb12 f303 	smulbb	r3, r2, r3
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4413      	add	r3, r2
 80013ca:	b298      	uxth	r0, r3
 80013cc:	8c3a      	ldrh	r2, [r7, #32]
 80013ce:	88b9      	ldrh	r1, [r7, #4]
 80013d0:	2300      	movs	r3, #0
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	2220      	movs	r2, #32
 80013e2:	f7ff fec1 	bl	8001168 <lcd_ShowChar>
				continue;
 80013e6:	e01a      	b.n	800141e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	fb12 f303 	smulbb	r3, r2, r3
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4413      	add	r3, r2
 80013fe:	b298      	uxth	r0, r3
 8001400:	7b3b      	ldrb	r3, [r7, #12]
 8001402:	3330      	adds	r3, #48	@ 0x30
 8001404:	b2da      	uxtb	r2, r3
 8001406:	8c3c      	ldrh	r4, [r7, #32]
 8001408:	88b9      	ldrh	r1, [r7, #4]
 800140a:	2300      	movs	r3, #0
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4623      	mov	r3, r4
 800141a:	f7ff fea5 	bl	8001168 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3301      	adds	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3a1      	bcc.n	8001370 <lcd_ShowIntNum+0x30>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	cccccccd 	.word	0xcccccccd

0800143c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <lcd_SetDir+0x44>)
 8001458:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800145c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <lcd_SetDir+0x44>)
 8001460:	22f0      	movs	r2, #240	@ 0xf0
 8001462:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001464:	e006      	b.n	8001474 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <lcd_SetDir+0x44>)
 8001468:	22f0      	movs	r2, #240	@ 0xf0
 800146a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <lcd_SetDir+0x44>)
 800146e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001472:	805a      	strh	r2, [r3, #2]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	200000c4 	.word	0x200000c4

08001484 <lcd_init>:


void lcd_init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800148e:	48aa      	ldr	r0, [pc, #680]	@ (8001738 <lcd_init+0x2b4>)
 8001490:	f001 fb1e 	bl	8002ad0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001494:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001498:	f001 f848 	bl	800252c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a2:	48a5      	ldr	r0, [pc, #660]	@ (8001738 <lcd_init+0x2b4>)
 80014a4:	f001 fb14 	bl	8002ad0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80014a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ac:	f001 f83e 	bl	800252c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ffc3 	bl	800143c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80014b6:	20d3      	movs	r0, #211	@ 0xd3
 80014b8:	f7ff fcd4 	bl	8000e64 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80014bc:	f7ff fcf2 	bl	8000ea4 <LCD_RD_DATA>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b9d      	ldr	r3, [pc, #628]	@ (800173c <lcd_init+0x2b8>)
 80014c6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80014c8:	f7ff fcec 	bl	8000ea4 <LCD_RD_DATA>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b9a      	ldr	r3, [pc, #616]	@ (800173c <lcd_init+0x2b8>)
 80014d2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80014d4:	f7ff fce6 	bl	8000ea4 <LCD_RD_DATA>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b97      	ldr	r3, [pc, #604]	@ (800173c <lcd_init+0x2b8>)
 80014de:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80014e0:	4b96      	ldr	r3, [pc, #600]	@ (800173c <lcd_init+0x2b8>)
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b94      	ldr	r3, [pc, #592]	@ (800173c <lcd_init+0x2b8>)
 80014ea:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80014ec:	f7ff fcda 	bl	8000ea4 <LCD_RD_DATA>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b91      	ldr	r3, [pc, #580]	@ (800173c <lcd_init+0x2b8>)
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b8f      	ldr	r3, [pc, #572]	@ (800173c <lcd_init+0x2b8>)
 80014fe:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001500:	20cf      	movs	r0, #207	@ 0xcf
 8001502:	f7ff fcaf 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fcbc 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800150c:	20c1      	movs	r0, #193	@ 0xc1
 800150e:	f7ff fcb9 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001512:	2030      	movs	r0, #48	@ 0x30
 8001514:	f7ff fcb6 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001518:	20ed      	movs	r0, #237	@ 0xed
 800151a:	f7ff fca3 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800151e:	2064      	movs	r0, #100	@ 0x64
 8001520:	f7ff fcb0 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001524:	2003      	movs	r0, #3
 8001526:	f7ff fcad 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800152a:	2012      	movs	r0, #18
 800152c:	f7ff fcaa 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001530:	2081      	movs	r0, #129	@ 0x81
 8001532:	f7ff fca7 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001536:	20e8      	movs	r0, #232	@ 0xe8
 8001538:	f7ff fc94 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800153c:	2085      	movs	r0, #133	@ 0x85
 800153e:	f7ff fca1 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001542:	2010      	movs	r0, #16
 8001544:	f7ff fc9e 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001548:	207a      	movs	r0, #122	@ 0x7a
 800154a:	f7ff fc9b 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800154e:	20cb      	movs	r0, #203	@ 0xcb
 8001550:	f7ff fc88 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001554:	2039      	movs	r0, #57	@ 0x39
 8001556:	f7ff fc95 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800155a:	202c      	movs	r0, #44	@ 0x2c
 800155c:	f7ff fc92 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff fc8f 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001566:	2034      	movs	r0, #52	@ 0x34
 8001568:	f7ff fc8c 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800156c:	2002      	movs	r0, #2
 800156e:	f7ff fc89 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001572:	20f7      	movs	r0, #247	@ 0xf7
 8001574:	f7ff fc76 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001578:	2020      	movs	r0, #32
 800157a:	f7ff fc83 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800157e:	20ea      	movs	r0, #234	@ 0xea
 8001580:	f7ff fc70 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fc7d 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fc7a 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001590:	20c0      	movs	r0, #192	@ 0xc0
 8001592:	f7ff fc67 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001596:	201b      	movs	r0, #27
 8001598:	f7ff fc74 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800159c:	20c1      	movs	r0, #193	@ 0xc1
 800159e:	f7ff fc61 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff fc6e 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80015a8:	20c5      	movs	r0, #197	@ 0xc5
 80015aa:	f7ff fc5b 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80015ae:	2030      	movs	r0, #48	@ 0x30
 80015b0:	f7ff fc68 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80015b4:	2030      	movs	r0, #48	@ 0x30
 80015b6:	f7ff fc65 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80015ba:	20c7      	movs	r0, #199	@ 0xc7
 80015bc:	f7ff fc52 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80015c0:	20b7      	movs	r0, #183	@ 0xb7
 80015c2:	f7ff fc5f 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80015c6:	2036      	movs	r0, #54	@ 0x36
 80015c8:	f7ff fc4c 	bl	8000e64 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80015cc:	2008      	movs	r0, #8
 80015ce:	f7ff fc59 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80015d2:	203a      	movs	r0, #58	@ 0x3a
 80015d4:	f7ff fc46 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80015d8:	2055      	movs	r0, #85	@ 0x55
 80015da:	f7ff fc53 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80015de:	20b1      	movs	r0, #177	@ 0xb1
 80015e0:	f7ff fc40 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fc4d 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80015ea:	201a      	movs	r0, #26
 80015ec:	f7ff fc4a 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80015f0:	20b6      	movs	r0, #182	@ 0xb6
 80015f2:	f7ff fc37 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80015f6:	200a      	movs	r0, #10
 80015f8:	f7ff fc44 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80015fc:	20a2      	movs	r0, #162	@ 0xa2
 80015fe:	f7ff fc41 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001602:	20f2      	movs	r0, #242	@ 0xf2
 8001604:	f7ff fc2e 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff fc3b 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800160e:	2026      	movs	r0, #38	@ 0x26
 8001610:	f7ff fc28 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fc35 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800161a:	20e0      	movs	r0, #224	@ 0xe0
 800161c:	f7ff fc22 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001620:	200f      	movs	r0, #15
 8001622:	f7ff fc2f 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001626:	202a      	movs	r0, #42	@ 0x2a
 8001628:	f7ff fc2c 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800162c:	2028      	movs	r0, #40	@ 0x28
 800162e:	f7ff fc29 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001632:	2008      	movs	r0, #8
 8001634:	f7ff fc26 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001638:	200e      	movs	r0, #14
 800163a:	f7ff fc23 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800163e:	2008      	movs	r0, #8
 8001640:	f7ff fc20 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001644:	2054      	movs	r0, #84	@ 0x54
 8001646:	f7ff fc1d 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800164a:	20a9      	movs	r0, #169	@ 0xa9
 800164c:	f7ff fc1a 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001650:	2043      	movs	r0, #67	@ 0x43
 8001652:	f7ff fc17 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001656:	200a      	movs	r0, #10
 8001658:	f7ff fc14 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800165c:	200f      	movs	r0, #15
 800165e:	f7ff fc11 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fc0e 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fc0b 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff fc08 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fc05 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800167a:	20e1      	movs	r0, #225	@ 0xe1
 800167c:	f7ff fbf2 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fbff 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001686:	2015      	movs	r0, #21
 8001688:	f7ff fbfc 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800168c:	2017      	movs	r0, #23
 800168e:	f7ff fbf9 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001692:	2007      	movs	r0, #7
 8001694:	f7ff fbf6 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001698:	2011      	movs	r0, #17
 800169a:	f7ff fbf3 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800169e:	2006      	movs	r0, #6
 80016a0:	f7ff fbf0 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80016a4:	202b      	movs	r0, #43	@ 0x2b
 80016a6:	f7ff fbed 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80016aa:	2056      	movs	r0, #86	@ 0x56
 80016ac:	f7ff fbea 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80016b0:	203c      	movs	r0, #60	@ 0x3c
 80016b2:	f7ff fbe7 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f7ff fbe4 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80016bc:	2010      	movs	r0, #16
 80016be:	f7ff fbe1 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f7ff fbde 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80016c8:	203f      	movs	r0, #63	@ 0x3f
 80016ca:	f7ff fbdb 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80016ce:	203f      	movs	r0, #63	@ 0x3f
 80016d0:	f7ff fbd8 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016d4:	200f      	movs	r0, #15
 80016d6:	f7ff fbd5 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80016da:	202b      	movs	r0, #43	@ 0x2b
 80016dc:	f7ff fbc2 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fbcf 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fbcc 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fbc9 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80016f2:	203f      	movs	r0, #63	@ 0x3f
 80016f4:	f7ff fbc6 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80016f8:	202a      	movs	r0, #42	@ 0x2a
 80016fa:	f7ff fbb3 	bl	8000e64 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fbc0 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fbbd 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fbba 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001710:	20ef      	movs	r0, #239	@ 0xef
 8001712:	f7ff fbb7 	bl	8000e84 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001716:	2011      	movs	r0, #17
 8001718:	f7ff fba4 	bl	8000e64 <LCD_WR_REG>
	HAL_Delay(120);
 800171c:	2078      	movs	r0, #120	@ 0x78
 800171e:	f000 ff05 	bl	800252c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001722:	2029      	movs	r0, #41	@ 0x29
 8001724:	f7ff fb9e 	bl	8000e64 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172e:	4804      	ldr	r0, [pc, #16]	@ (8001740 <lcd_init+0x2bc>)
 8001730:	f001 f9ce 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40020800 	.word	0x40020800
 800173c:	200000c4 	.word	0x200000c4
 8001740:	40020000 	.word	0x40020000

08001744 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	b29a      	uxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b298      	uxth	r0, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	b29a      	uxth	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4413      	add	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	8b3a      	ldrh	r2, [r7, #24]
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fc29 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	b29b      	uxth	r3, r3
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	b298      	uxth	r0, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	b29a      	uxth	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b29b      	uxth	r3, r3
 800178a:	8b3a      	ldrh	r2, [r7, #24]
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff fc19 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4413      	add	r3, r2
 800179c:	b298      	uxth	r0, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	8b3a      	ldrh	r2, [r7, #24]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff fc09 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b298      	uxth	r0, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	8b3a      	ldrh	r2, [r7, #24]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff fbf9 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4413      	add	r3, r2
 80017dc:	b298      	uxth	r0, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	8b3a      	ldrh	r2, [r7, #24]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fbe9 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	b298      	uxth	r0, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	8b3a      	ldrh	r2, [r7, #24]
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff fbd9 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	b29a      	uxth	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	b298      	uxth	r0, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	b29b      	uxth	r3, r3
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	8b3a      	ldrh	r2, [r7, #24]
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff fbc9 	bl	8000fc4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	b29a      	uxth	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b298      	uxth	r0, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	b29a      	uxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	b29b      	uxth	r3, r3
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b29b      	uxth	r3, r3
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff fbb9 	bl	8000fc4 <lcd_DrawPoint>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b08a      	sub	sp, #40	@ 0x28
 800185e:	af02      	add	r7, sp, #8
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4613      	mov	r3, r2
 8001868:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	f1c3 0303 	rsb	r3, r3, #3
 800187a:	613b      	str	r3, [r7, #16]


	if (fill)
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	2b00      	cmp	r3, #0
 8001880:	d04f      	beq.n	8001922 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001882:	e029      	b.n	80018d8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff ff55 	bl	8001744 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	ddf0      	ble.n	800188a <lcd_DrawCircle+0x30>

			if (d < 0) {
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da06      	bge.n	80018bc <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	009a      	lsls	r2, r3, #2
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4413      	add	r3, r2
 80018b6:	3306      	adds	r3, #6
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e00a      	b.n	80018d2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	009a      	lsls	r2, r3, #2
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	330a      	adds	r3, #10
 80018ca:	613b      	str	r3, [r7, #16]
				y--;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	429a      	cmp	r2, r3
 80018de:	ddd1      	ble.n	8001884 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80018e0:	e023      	b.n	800192a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff ff29 	bl	8001744 <_draw_circle_8>
			if (d < 0) {
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da06      	bge.n	8001906 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	009a      	lsls	r2, r3, #2
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4413      	add	r3, r2
 8001900:	3306      	adds	r3, #6
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e00a      	b.n	800191c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4413      	add	r3, r2
 8001912:	330a      	adds	r3, #10
 8001914:	613b      	str	r3, [r7, #16]
				y--;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	3b01      	subs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
			x++;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	3301      	adds	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	429a      	cmp	r2, r3
 8001928:	dddb      	ble.n	80018e2 <lcd_DrawCircle+0x88>
}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b08b      	sub	sp, #44	@ 0x2c
 8001938:	af04      	add	r7, sp, #16
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	81fb      	strh	r3, [r7, #14]
 8001942:	460b      	mov	r3, r1
 8001944:	81bb      	strh	r3, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001952:	e048      	b.n	80019e6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d145      	bne.n	80019e6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800195a:	89fa      	ldrh	r2, [r7, #14]
 800195c:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <lcd_ShowStr+0xc4>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	1acb      	subs	r3, r1, r3
 800196c:	429a      	cmp	r2, r3
 800196e:	dc3f      	bgt.n	80019f0 <lcd_ShowStr+0xbc>
 8001970:	89ba      	ldrh	r2, [r7, #12]
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <lcd_ShowStr+0xc4>)
 8001974:	885b      	ldrh	r3, [r3, #2]
 8001976:	4619      	mov	r1, r3
 8001978:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800197c:	1acb      	subs	r3, r1, r3
 800197e:	429a      	cmp	r2, r3
 8001980:	dc36      	bgt.n	80019f0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b80      	cmp	r3, #128	@ 0x80
 8001988:	d902      	bls.n	8001990 <lcd_ShowStr+0x5c>
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
 800198e:	e02a      	b.n	80019e6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b0d      	cmp	r3, #13
 8001996:	d10b      	bne.n	80019b0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001998:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800199c:	b29a      	uxth	r2, r3
 800199e:	89bb      	ldrh	r3, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80019a4:	8abb      	ldrh	r3, [r7, #20]
 80019a6:	81fb      	strh	r3, [r7, #14]
					str++;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	e017      	b.n	80019e0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	88fc      	ldrh	r4, [r7, #6]
 80019b6:	89b9      	ldrh	r1, [r7, #12]
 80019b8:	89f8      	ldrh	r0, [r7, #14]
 80019ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	4623      	mov	r3, r4
 80019cc:	f7ff fbcc 	bl	8001168 <lcd_ShowChar>
					x+=sizey/2;
 80019d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	4413      	add	r3, r2
 80019de:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1b2      	bne.n	8001954 <lcd_ShowStr+0x20>
 80019ee:	e000      	b.n	80019f2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80019f0:	bf00      	nop
			}
		}
	}
}
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	200000c4 	.word	0x200000c4

080019fc <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af04      	add	r7, sp, #16
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	81fb      	strh	r3, [r7, #14]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	81bb      	strh	r3, [r7, #12]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001a12:	68b8      	ldr	r0, [r7, #8]
 8001a14:	f7fe fbd8 	bl	80001c8 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <lcd_StrCenter+0x60>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	8afb      	ldrh	r3, [r7, #22]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	0fda      	lsrs	r2, r3, #31
 8001a2a:	4413      	add	r3, r2
 8001a2c:	105b      	asrs	r3, r3, #1
 8001a2e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001a30:	89fa      	ldrh	r2, [r7, #14]
 8001a32:	8abb      	ldrh	r3, [r7, #20]
 8001a34:	4413      	add	r3, r2
 8001a36:	b298      	uxth	r0, r3
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	89b9      	ldrh	r1, [r7, #12]
 8001a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	8c3b      	ldrh	r3, [r7, #32]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f7ff ff70 	bl	8001934 <lcd_ShowStr>
}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000c4 	.word	0x200000c4

08001a60 <lcd_TrafficLight>:
//	lcd_DrawCircle(205, 115, GREEN, 5, 1);
	lcd_StrCenter(10, 15, "NORMAL", CYAN, YELLOW, 12, 0);
}
//TrafficLight: 0 for left, 1 for right
//Colour: 0 for green, 1 for yellow, 2 for red
void lcd_TrafficLight(int TrafficLight, int Colour){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	switch (Colour){
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d04f      	beq.n	8001b14 <lcd_TrafficLight+0xb4>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	f300 80ca 	bgt.w	8001c14 <lcd_TrafficLight+0x1b4>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8001a86:	d005      	beq.n	8001a94 <lcd_TrafficLight+0x34>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 8001a8e:	f000 8081 	beq.w	8001b94 <lcd_TrafficLight+0x134>
			default:
				break;
		}
		break;
	default:
		break;
 8001a92:	e0bf      	b.n	8001c14 <lcd_TrafficLight+0x1b4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <lcd_TrafficLight+0x42>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d01c      	beq.n	8001ada <lcd_TrafficLight+0x7a>
				break;
 8001aa0:	e037      	b.n	8001b12 <lcd_TrafficLight+0xb2>
				lcd_DrawCircle(35, 65, GRAY, 5, 1);
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001aac:	2141      	movs	r1, #65	@ 0x41
 8001aae:	2023      	movs	r0, #35	@ 0x23
 8001ab0:	f7ff fed3 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(35, 90, GRAY, 5, 1);
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2305      	movs	r3, #5
 8001aba:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001abe:	215a      	movs	r1, #90	@ 0x5a
 8001ac0:	2023      	movs	r0, #35	@ 0x23
 8001ac2:	f7ff feca 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(35, 115, GREEN, 5, 1);
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2305      	movs	r3, #5
 8001acc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ad0:	2173      	movs	r1, #115	@ 0x73
 8001ad2:	2023      	movs	r0, #35	@ 0x23
 8001ad4:	f7ff fec1 	bl	800185a <lcd_DrawCircle>
				break;
 8001ad8:	e01b      	b.n	8001b12 <lcd_TrafficLight+0xb2>
				lcd_DrawCircle(205, 65, GRAY, 5, 1);
 8001ada:	2301      	movs	r3, #1
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2305      	movs	r3, #5
 8001ae0:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001ae4:	2141      	movs	r1, #65	@ 0x41
 8001ae6:	20cd      	movs	r0, #205	@ 0xcd
 8001ae8:	f7ff feb7 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(205, 90, GRAY, 5, 1);
 8001aec:	2301      	movs	r3, #1
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2305      	movs	r3, #5
 8001af2:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001af6:	215a      	movs	r1, #90	@ 0x5a
 8001af8:	20cd      	movs	r0, #205	@ 0xcd
 8001afa:	f7ff feae 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(205, 115, GREEN, 5, 1);
 8001afe:	2301      	movs	r3, #1
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2305      	movs	r3, #5
 8001b04:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b08:	2173      	movs	r1, #115	@ 0x73
 8001b0a:	20cd      	movs	r0, #205	@ 0xcd
 8001b0c:	f7ff fea5 	bl	800185a <lcd_DrawCircle>
				break;
 8001b10:	bf00      	nop
		break;
 8001b12:	e080      	b.n	8001c16 <lcd_TrafficLight+0x1b6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <lcd_TrafficLight+0xc2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d01c      	beq.n	8001b5a <lcd_TrafficLight+0xfa>
				break;
 8001b20:	e037      	b.n	8001b92 <lcd_TrafficLight+0x132>
				lcd_DrawCircle(35, 65, GRAY, 5, 1);
 8001b22:	2301      	movs	r3, #1
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2305      	movs	r3, #5
 8001b28:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001b2c:	2141      	movs	r1, #65	@ 0x41
 8001b2e:	2023      	movs	r0, #35	@ 0x23
 8001b30:	f7ff fe93 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(35, 90, YELLOW, 5, 1);
 8001b34:	2301      	movs	r3, #1
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2305      	movs	r3, #5
 8001b3a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b3e:	215a      	movs	r1, #90	@ 0x5a
 8001b40:	2023      	movs	r0, #35	@ 0x23
 8001b42:	f7ff fe8a 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(35, 115, GRAY, 5, 1);
 8001b46:	2301      	movs	r3, #1
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001b50:	2173      	movs	r1, #115	@ 0x73
 8001b52:	2023      	movs	r0, #35	@ 0x23
 8001b54:	f7ff fe81 	bl	800185a <lcd_DrawCircle>
				break;
 8001b58:	e01b      	b.n	8001b92 <lcd_TrafficLight+0x132>
				lcd_DrawCircle(205, 65, GRAY, 5, 1);
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2305      	movs	r3, #5
 8001b60:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001b64:	2141      	movs	r1, #65	@ 0x41
 8001b66:	20cd      	movs	r0, #205	@ 0xcd
 8001b68:	f7ff fe77 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(205, 90, YELLOW, 5, 1);
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2305      	movs	r3, #5
 8001b72:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b76:	215a      	movs	r1, #90	@ 0x5a
 8001b78:	20cd      	movs	r0, #205	@ 0xcd
 8001b7a:	f7ff fe6e 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(205, 115, GRAY, 5, 1);
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2305      	movs	r3, #5
 8001b84:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001b88:	2173      	movs	r1, #115	@ 0x73
 8001b8a:	20cd      	movs	r0, #205	@ 0xcd
 8001b8c:	f7ff fe65 	bl	800185a <lcd_DrawCircle>
				break;
 8001b90:	bf00      	nop
		break;
 8001b92:	e040      	b.n	8001c16 <lcd_TrafficLight+0x1b6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <lcd_TrafficLight+0x142>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d01c      	beq.n	8001bda <lcd_TrafficLight+0x17a>
				break;
 8001ba0:	e037      	b.n	8001c12 <lcd_TrafficLight+0x1b2>
				lcd_DrawCircle(35, 65, RED, 5, 1);
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001bac:	2141      	movs	r1, #65	@ 0x41
 8001bae:	2023      	movs	r0, #35	@ 0x23
 8001bb0:	f7ff fe53 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(35, 90, GRAY, 5, 1);
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2305      	movs	r3, #5
 8001bba:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001bbe:	215a      	movs	r1, #90	@ 0x5a
 8001bc0:	2023      	movs	r0, #35	@ 0x23
 8001bc2:	f7ff fe4a 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(35, 115, GRAY, 5, 1);
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2305      	movs	r3, #5
 8001bcc:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001bd0:	2173      	movs	r1, #115	@ 0x73
 8001bd2:	2023      	movs	r0, #35	@ 0x23
 8001bd4:	f7ff fe41 	bl	800185a <lcd_DrawCircle>
				break;
 8001bd8:	e01b      	b.n	8001c12 <lcd_TrafficLight+0x1b2>
				lcd_DrawCircle(205, 65, RED, 5, 1);
 8001bda:	2301      	movs	r3, #1
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2305      	movs	r3, #5
 8001be0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001be4:	2141      	movs	r1, #65	@ 0x41
 8001be6:	20cd      	movs	r0, #205	@ 0xcd
 8001be8:	f7ff fe37 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(205, 90, GRAY, 5, 1);
 8001bec:	2301      	movs	r3, #1
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001bf6:	215a      	movs	r1, #90	@ 0x5a
 8001bf8:	20cd      	movs	r0, #205	@ 0xcd
 8001bfa:	f7ff fe2e 	bl	800185a <lcd_DrawCircle>
				lcd_DrawCircle(205, 115, GRAY, 5, 1);
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2305      	movs	r3, #5
 8001c04:	f248 4230 	movw	r2, #33840	@ 0x8430
 8001c08:	2173      	movs	r1, #115	@ 0x73
 8001c0a:	20cd      	movs	r0, #205	@ 0xcd
 8001c0c:	f7ff fe25 	bl	800185a <lcd_DrawCircle>
				break;
 8001c10:	bf00      	nop
		break;
 8001c12:	e000      	b.n	8001c16 <lcd_TrafficLight+0x1b6>
		break;
 8001c14:	bf00      	nop
	}
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2140      	movs	r1, #64	@ 0x40
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <led7_init+0x14>)
 8001c2a:	f000 ff51 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021800 	.word	0x40021800

08001c38 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <led7_Scan+0x104>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <led7_Scan+0x104>)
 8001c46:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001c48:	4b3d      	ldr	r3, [pc, #244]	@ (8001d40 <led7_Scan+0x108>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d44 <led7_Scan+0x10c>)
 8001c50:	5c9b      	ldrb	r3, [r3, r2]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <led7_Scan+0x104>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <led7_Scan+0x104>)
 8001c64:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001c66:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <led7_Scan+0x108>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d846      	bhi.n	8001cfc <led7_Scan+0xc4>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <led7_Scan+0x3c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001ca3 	.word	0x08001ca3
 8001c7c:	08001cc1 	.word	0x08001cc1
 8001c80:	08001cdf 	.word	0x08001cdf
	case 0:
		spi_buffer |= 0x00b0;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <led7_Scan+0x104>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <led7_Scan+0x104>)
 8001c90:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <led7_Scan+0x104>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b27      	ldr	r3, [pc, #156]	@ (8001d3c <led7_Scan+0x104>)
 8001c9e:	801a      	strh	r2, [r3, #0]
		break;
 8001ca0:	e02d      	b.n	8001cfe <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <led7_Scan+0x104>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <led7_Scan+0x104>)
 8001cae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <led7_Scan+0x104>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	f023 0320 	bic.w	r3, r3, #32
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <led7_Scan+0x104>)
 8001cbc:	801a      	strh	r2, [r3, #0]
		break;
 8001cbe:	e01e      	b.n	8001cfe <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <led7_Scan+0x104>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <led7_Scan+0x104>)
 8001ccc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <led7_Scan+0x104>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	f023 0310 	bic.w	r3, r3, #16
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <led7_Scan+0x104>)
 8001cda:	801a      	strh	r2, [r3, #0]
		break;
 8001cdc:	e00f      	b.n	8001cfe <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <led7_Scan+0x104>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <led7_Scan+0x104>)
 8001cea:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <led7_Scan+0x104>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <led7_Scan+0x104>)
 8001cf8:	801a      	strh	r2, [r3, #0]
		break;
 8001cfa:	e000      	b.n	8001cfe <led7_Scan+0xc6>
	default:
		break;
 8001cfc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <led7_Scan+0x108>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	425a      	negs	r2, r3
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	bf58      	it	pl
 8001d10:	4253      	negpl	r3, r2
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <led7_Scan+0x108>)
 8001d16:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2140      	movs	r1, #64	@ 0x40
 8001d1c:	480a      	ldr	r0, [pc, #40]	@ (8001d48 <led7_Scan+0x110>)
 8001d1e:	f000 fed7 	bl	8002ad0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001d22:	2301      	movs	r3, #1
 8001d24:	2202      	movs	r2, #2
 8001d26:	4905      	ldr	r1, [pc, #20]	@ (8001d3c <led7_Scan+0x104>)
 8001d28:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <led7_Scan+0x114>)
 8001d2a:	f001 fbd8 	bl	80034de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2140      	movs	r1, #64	@ 0x40
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <led7_Scan+0x110>)
 8001d34:	f000 fecc 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	200000ca 	.word	0x200000ca
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	200000e0 	.word	0x200000e0

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d56:	f000 fb77 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5a:	f000 f899 	bl	8001e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5e:	f7fe ff89 	bl	8000c74 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d62:	f000 fad5 	bl	8002310 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001d66:	f000 f9e1 	bl	800212c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001d6a:	f7fe feb3 	bl	8000ad4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001d6e:	f000 f8f9 	bl	8001f64 <system_init>
  lcd_Clear(BLACK);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff f8f4 	bl	8000f60 <lcd_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_timer4 ){
 8001d78:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <main+0x110>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d034      	beq.n	8001dea <main+0x9a>
		  setTimer4(50);
 8001d80:	2032      	movs	r0, #50	@ 0x32
 8001d82:	f000 f957 	bl	8002034 <setTimer4>
		  button_Scan();
 8001d86:	f7fe fbab 	bl	80004e0 <button_Scan>

			if (button_count[0] == 1) {
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <main+0x114>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d129      	bne.n	8001de6 <main+0x96>
				status++;
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <main+0x118>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a33      	ldr	r2, [pc, #204]	@ (8001e68 <main+0x118>)
 8001d9a:	6013      	str	r3, [r2, #0]
				if (status > 3)
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <main+0x118>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	dd02      	ble.n	8001daa <main+0x5a>
					status = 0;
 8001da4:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <main+0x118>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
				switch (status) {
 8001daa:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <main+0x118>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d00b      	beq.n	8001dca <main+0x7a>
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	dc13      	bgt.n	8001dde <main+0x8e>
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d002      	beq.n	8001dc0 <main+0x70>
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d00a      	beq.n	8001dd4 <main+0x84>
					break;
				case MODIFICATION_GREEN:
					temp = GREEN_TIME;
					break;
				default:
					break;
 8001dbe:	e00e      	b.n	8001dde <main+0x8e>
					temp = RED_TIME;
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <main+0x11c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e70 <main+0x120>)
 8001dc6:	6013      	str	r3, [r2, #0]
					break;
 8001dc8:	e00a      	b.n	8001de0 <main+0x90>
					temp = YELLOW_TIME;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <main+0x124>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a28      	ldr	r2, [pc, #160]	@ (8001e70 <main+0x120>)
 8001dd0:	6013      	str	r3, [r2, #0]
					break;
 8001dd2:	e005      	b.n	8001de0 <main+0x90>
					temp = GREEN_TIME;
 8001dd4:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <main+0x128>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <main+0x120>)
 8001dda:	6013      	str	r3, [r2, #0]
					break;
 8001ddc:	e000      	b.n	8001de0 <main+0x90>
					break;
 8001dde:	bf00      	nop
				}
				lcd_Clear(BLACK);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff f8bd 	bl	8000f60 <lcd_Clear>
			}

			fsm_tuning_run();
 8001de6:	f7fe fc63 	bl	80006b0 <fsm_tuning_run>

	  }
		if (flag_timer3 && status != NORMAL) {
 8001dea:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <main+0x12c>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d010      	beq.n	8001e14 <main+0xc4>
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <main+0x118>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <main+0xc4>
			light_freq= !light_freq;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <main+0x130>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <main+0x130>)
 8001e0c:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 8001e0e:	20fa      	movs	r0, #250	@ 0xfa
 8001e10:	f000 f8f4 	bl	8001ffc <setTimer3>
		}
	  if(flag_timer2 && status == NORMAL){
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <main+0x134>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ad      	beq.n	8001d78 <main+0x28>
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <main+0x118>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1a9      	bne.n	8001d78 <main+0x28>
		  lcd_StrCenter(10, 15, "NORMAL", BLACK, YELLOW, 16, 0);
 8001e24:	2300      	movs	r3, #0
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	2310      	movs	r3, #16
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <main+0x138>)
 8001e36:	210f      	movs	r1, #15
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f7ff fddf 	bl	80019fc <lcd_StrCenter>
		  if(light_status > 4) light_status =0;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <main+0x13c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	dd03      	ble.n	8001e4e <main+0xfe>
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <main+0x13c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e004      	b.n	8001e58 <main+0x108>
		  else light_status++;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <main+0x13c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <main+0x13c>)
 8001e56:	6013      	str	r3, [r2, #0]
		  fsm_auto_run();
 8001e58:	f7fe fbae 	bl	80005b8 <fsm_auto_run>
	  if(flag_timer4 ){
 8001e5c:	e78c      	b.n	8001d78 <main+0x28>
 8001e5e:	bf00      	nop
 8001e60:	200000d8 	.word	0x200000d8
 8001e64:	2000003c 	.word	0x2000003c
 8001e68:	20000064 	.word	0x20000064
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	2000006c 	.word	0x2000006c
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	200000d2 	.word	0x200000d2
 8001e80:	20000068 	.word	0x20000068
 8001e84:	200000cc 	.word	0x200000cc
 8001e88:	08004b48 	.word	0x08004b48
 8001e8c:	20000060 	.word	0x20000060

08001e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b094      	sub	sp, #80	@ 0x50
 8001e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	2230      	movs	r2, #48	@ 0x30
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fdfc 	bl	8004a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	4b28      	ldr	r3, [pc, #160]	@ (8001f5c <SystemClock_Config+0xcc>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	4a27      	ldr	r2, [pc, #156]	@ (8001f5c <SystemClock_Config+0xcc>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <SystemClock_Config+0xcc>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <SystemClock_Config+0xd0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <SystemClock_Config+0xd0>)
 8001eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <SystemClock_Config+0xd0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f00:	2308      	movs	r3, #8
 8001f02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f04:	23a8      	movs	r3, #168	@ 0xa8
 8001f06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f10:	f107 0320 	add.w	r3, r7, #32
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fdf5 	bl	8002b04 <HAL_RCC_OscConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f20:	f000 f840 	bl	8001fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f24:	230f      	movs	r3, #15
 8001f26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f36:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2105      	movs	r1, #5
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 f856 	bl	8002ff4 <HAL_RCC_ClockConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f4e:	f000 f829 	bl	8001fa4 <Error_Handler>
  }
}
 8001f52:	bf00      	nop
 8001f54:	3750      	adds	r7, #80	@ 0x50
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000

08001f64 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	480c      	ldr	r0, [pc, #48]	@ (8001fa0 <system_init+0x3c>)
 8001f6e:	f000 fdaf 	bl	8002ad0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2140      	movs	r1, #64	@ 0x40
 8001f76:	480a      	ldr	r0, [pc, #40]	@ (8001fa0 <system_init+0x3c>)
 8001f78:	f000 fdaa 	bl	8002ad0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2110      	movs	r1, #16
 8001f80:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <system_init+0x3c>)
 8001f82:	f000 fda5 	bl	8002ad0 <HAL_GPIO_WritePin>
	  timer_init();
 8001f86:	f000 f813 	bl	8001fb0 <timer_init>
	  led7_init();
 8001f8a:	f7ff fe49 	bl	8001c20 <led7_init>
	  button_init();
 8001f8e:	f7fe fa9b 	bl	80004c8 <button_init>
	  lcd_init();
 8001f92:	f7ff fa77 	bl	8001484 <lcd_init>
	  setTimer4(50);
 8001f96:	2032      	movs	r0, #50	@ 0x32
 8001f98:	f000 f84c 	bl	8002034 <setTimer4>
//	  TrafficLightInit();
//	  light_status= 0;
//	  status= 0;
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa8:	b672      	cpsid	i
}
 8001faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <Error_Handler+0x8>

08001fb0 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <timer_init+0x10>)
 8001fb6:	f002 f873 	bl	80040a0 <HAL_TIM_Base_Start_IT>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000138 	.word	0x20000138

08001fc4 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001fce:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <setTimer2+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <setTimer2+0x2c>)
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <setTimer2+0x30>)
 8001fda:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <setTimer2+0x34>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200000d0 	.word	0x200000d0
 8001ff4:	200000ce 	.word	0x200000ce
 8001ff8:	200000cc 	.word	0x200000cc

08001ffc <setTimer3>:

void setTimer3(uint16_t duration){
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <setTimer3+0x2c>)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <setTimer3+0x2c>)
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <setTimer3+0x30>)
 8002012:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <setTimer3+0x34>)
 8002016:	2200      	movs	r2, #0
 8002018:	801a      	strh	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200000d6 	.word	0x200000d6
 800202c:	200000d4 	.word	0x200000d4
 8002030:	200000d2 	.word	0x200000d2

08002034 <setTimer4>:

void setTimer4(uint16_t duration){
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 800203e:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <setTimer4+0x2c>)
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <setTimer4+0x2c>)
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <setTimer4+0x30>)
 800204a:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <setTimer4+0x34>)
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200000dc 	.word	0x200000dc
 8002064:	200000da 	.word	0x200000da
 8002068:	200000d8 	.word	0x200000d8

0800206c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207c:	d140      	bne.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x94>
		if (timer2_counter > 0) {
 800207e:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x26>
			timer2_counter--;
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002090:	801a      	strh	r2, [r3, #0]

		}
		if (timer2_counter <= 0) {
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			flag_timer2 = 1;
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800209c:	2201      	movs	r2, #1
 800209e:	801a      	strh	r2, [r3, #0]
			timer2_counter = timer2_MUL;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80020a6:	801a      	strh	r2, [r3, #0]
		}
		if (timer3_counter > 0) {
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x50>
			timer3_counter--;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020ba:	801a      	strh	r2, [r3, #0]
		}
		if (timer3_counter <= 0) {
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x66>
			flag_timer3 = 1;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	801a      	strh	r2, [r3, #0]
			timer3_counter = timer3_MUL;
 80020ca:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020d0:	801a      	strh	r2, [r3, #0]
		}
		if (timer4_counter > 0) {
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			timer4_counter--;
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020e4:	801a      	strh	r2, [r3, #0]

		}
		if (timer4_counter <= 0) {
 80020e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_PeriodElapsedCallback+0x90>
			flag_timer4 = 1;
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	801a      	strh	r2, [r3, #0]
			timer4_counter = timer4_MUL;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020fa:	801a      	strh	r2, [r3, #0]
		}
		// 1ms interrupt here
		led7_Scan();
 80020fc:	f7ff fd9c 	bl	8001c38 <led7_Scan>
	}
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200000ce 	.word	0x200000ce
 800210c:	200000cc 	.word	0x200000cc
 8002110:	200000d0 	.word	0x200000d0
 8002114:	200000d4 	.word	0x200000d4
 8002118:	200000d2 	.word	0x200000d2
 800211c:	200000d6 	.word	0x200000d6
 8002120:	200000da 	.word	0x200000da
 8002124:	200000d8 	.word	0x200000d8
 8002128:	200000dc 	.word	0x200000dc

0800212c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002130:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002132:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <MX_SPI1_Init+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002138:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800213c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800213e:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <MX_SPI1_Init+0x64>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002150:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800215c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <MX_SPI1_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <MX_SPI1_Init+0x64>)
 8002178:	220a      	movs	r2, #10
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800217c:	4804      	ldr	r0, [pc, #16]	@ (8002190 <MX_SPI1_Init+0x64>)
 800217e:	f001 f925 	bl	80033cc <HAL_SPI_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002188:	f7ff ff0c 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200000e0 	.word	0x200000e0
 8002194:	40013000 	.word	0x40013000

08002198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	@ (800221c <HAL_SPI_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12b      	bne.n	8002212 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021f2:	2338      	movs	r3, #56	@ 0x38
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002202:	2305      	movs	r3, #5
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_SPI_MspInit+0x8c>)
 800220e:	f000 fac3 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	@ 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40013000 	.word	0x40013000
 8002220:	40023800 	.word	0x40023800
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <HAL_MspInit+0x4c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_MspInit+0x4c>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	@ 0x40
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <NMI_Handler+0x4>

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <MemManage_Handler+0x4>

08002290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <UsageFault_Handler+0x4>

080022a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ce:	f000 f90d 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM2_IRQHandler+0x10>)
 80022de:	f001 ff4f 	bl	8004180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000138 	.word	0x20000138

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	@ (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	463b      	mov	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <MX_TIM2_Init+0x94>)
 800232e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002334:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <MX_TIM2_Init+0x94>)
 8002336:	f240 3247 	movw	r2, #839	@ 0x347
 800233a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <MX_TIM2_Init+0x94>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002342:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <MX_TIM2_Init+0x94>)
 8002344:	2263      	movs	r2, #99	@ 0x63
 8002346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <MX_TIM2_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <MX_TIM2_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002354:	4813      	ldr	r0, [pc, #76]	@ (80023a4 <MX_TIM2_Init+0x94>)
 8002356:	f001 fe53 	bl	8004000 <HAL_TIM_Base_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002360:	f7ff fe20 	bl	8001fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4619      	mov	r1, r3
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <MX_TIM2_Init+0x94>)
 8002372:	f001 fff5 	bl	8004360 <HAL_TIM_ConfigClockSource>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800237c:	f7ff fe12 	bl	8001fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <MX_TIM2_Init+0x94>)
 800238e:	f002 fa1d 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002398:	f7ff fe04 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000138 	.word	0x20000138

080023a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b8:	d115      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_TIM_Base_MspInit+0x48>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a0b      	ldr	r2, [pc, #44]	@ (80023f0 <HAL_TIM_Base_MspInit+0x48>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_TIM_Base_MspInit+0x48>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	201c      	movs	r0, #28
 80023dc:	f000 f9a5 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023e0:	201c      	movs	r0, #28
 80023e2:	f000 f9be 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	@ (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	@ (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	@ (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800241e:	f7ff ff65 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f002 fb43 	bl	8004aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff fc93 	bl	8001d50 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002438:	08007b10 	.word	0x08007b10
  ldr r2, =_sbss
 800243c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002440:	20000184 	.word	0x20000184

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	@ (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f94f 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fed4 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f967 	bl	800277e <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 f92f 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	@ (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000014 	.word	0x20000014
 80024e4:	2000001c 	.word	0x2000001c
 80024e8:	20000018 	.word	0x20000018

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000001c 	.word	0x2000001c
 8002510:	20000180 	.word	0x20000180

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000180 	.word	0x20000180

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffde 	bl	8002514 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000001c 	.word	0x2000001c

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	@ (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff29 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff3e 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff8e 	bl	8002668 <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5d 	bl	8002614 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff31 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa2 	bl	80026d0 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e16b      	b.n	8002a8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 815a 	bne.w	8002a86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d005      	beq.n	80027ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d123      	bne.n	80028dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80b4 	beq.w	8002a86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b60      	ldr	r3, [pc, #384]	@ (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	4a5f      	ldr	r2, [pc, #380]	@ (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292c:	6453      	str	r3, [r2, #68]	@ 0x44
 800292e:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa8 <HAL_GPIO_Init+0x310>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_GPIO_Init+0x314>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02b      	beq.n	80029be <HAL_GPIO_Init+0x226>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a51      	ldr	r2, [pc, #324]	@ (8002ab0 <HAL_GPIO_Init+0x318>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x222>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a50      	ldr	r2, [pc, #320]	@ (8002ab4 <HAL_GPIO_Init+0x31c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x21e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab8 <HAL_GPIO_Init+0x320>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x21a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4e      	ldr	r2, [pc, #312]	@ (8002abc <HAL_GPIO_Init+0x324>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x216>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac0 <HAL_GPIO_Init+0x328>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x212>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac4 <HAL_GPIO_Init+0x32c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac8 <HAL_GPIO_Init+0x330>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x20a>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00e      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029a2:	2308      	movs	r3, #8
 80029a4:	e00c      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00a      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029aa:	2305      	movs	r3, #5
 80029ac:	e008      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029ae:	2304      	movs	r3, #4
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029be:	2300      	movs	r3, #0
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d0:	4935      	ldr	r1, [pc, #212]	@ (8002aa8 <HAL_GPIO_Init+0x310>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <HAL_GPIO_Init+0x334>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a27      	ldr	r2, [pc, #156]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a32:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a56:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a80:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	f67f ae90 	bls.w	80027b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40021c00 	.word	0x40021c00
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e267      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d075      	beq.n	8002c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d00c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b85      	ldr	r3, [pc, #532]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d112      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b82      	ldr	r3, [pc, #520]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b46:	d10b      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	4b7e      	ldr	r3, [pc, #504]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d05b      	beq.n	8002c0c <HAL_RCC_OscConfig+0x108>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d157      	bne.n	8002c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e242      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_OscConfig+0x74>
 8002b6a:	4b76      	ldr	r3, [pc, #472]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a75      	ldr	r2, [pc, #468]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e01d      	b.n	8002bb4 <HAL_RCC_OscConfig+0xb0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x98>
 8002b82:	4b70      	ldr	r3, [pc, #448]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6f      	ldr	r2, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6c      	ldr	r2, [pc, #432]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	4b69      	ldr	r3, [pc, #420]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a68      	ldr	r2, [pc, #416]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b66      	ldr	r3, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a65      	ldr	r2, [pc, #404]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fcaa 	bl	8002514 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fca6 	bl	8002514 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e207      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xc0>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7ff fc96 	bl	8002514 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7ff fc92 	bl	8002514 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1f3      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	4b51      	ldr	r3, [pc, #324]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0xe8>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d11c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b44      	ldr	r3, [pc, #272]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d116      	bne.n	8002c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x152>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e1c7      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4937      	ldr	r1, [pc, #220]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	e03a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c74:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCC_OscConfig+0x244>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7ff fc4b 	bl	8002514 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c82:	f7ff fc47 	bl	8002514 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e1a8      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	4b2b      	ldr	r3, [pc, #172]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4925      	ldr	r1, [pc, #148]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb6:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <HAL_RCC_OscConfig+0x244>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fc2a 	bl	8002514 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7ff fc26 	bl	8002514 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e187      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d036      	beq.n	8002d5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_RCC_OscConfig+0x248>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff fc0a 	bl	8002514 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7ff fc06 	bl	8002514 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e167      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_OscConfig+0x240>)
 8002d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x200>
 8002d22:	e01b      	b.n	8002d5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d24:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_RCC_OscConfig+0x248>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7ff fbf3 	bl	8002514 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	e00e      	b.n	8002d50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d32:	f7ff fbef 	bl	8002514 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d907      	bls.n	8002d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e150      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	42470000 	.word	0x42470000
 8002d4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	4b88      	ldr	r3, [pc, #544]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ea      	bne.n	8002d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8097 	beq.w	8002e98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6e:	4b81      	ldr	r3, [pc, #516]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	4a7c      	ldr	r2, [pc, #496]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b77      	ldr	r3, [pc, #476]	@ (8002f78 <HAL_RCC_OscConfig+0x474>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da6:	4b74      	ldr	r3, [pc, #464]	@ (8002f78 <HAL_RCC_OscConfig+0x474>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a73      	ldr	r2, [pc, #460]	@ (8002f78 <HAL_RCC_OscConfig+0x474>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db2:	f7ff fbaf 	bl	8002514 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dba:	f7ff fbab 	bl	8002514 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e10c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <HAL_RCC_OscConfig+0x474>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x2ea>
 8002de0:	4b64      	ldr	r3, [pc, #400]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	4a63      	ldr	r2, [pc, #396]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dec:	e01c      	b.n	8002e28 <HAL_RCC_OscConfig+0x324>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x30c>
 8002df6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e02:	4b5c      	ldr	r3, [pc, #368]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e06:	4a5b      	ldr	r2, [pc, #364]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0x324>
 8002e10:	4b58      	ldr	r3, [pc, #352]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e14:	4a57      	ldr	r2, [pc, #348]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1c:	4b55      	ldr	r3, [pc, #340]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a54      	ldr	r2, [pc, #336]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 0304 	bic.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7ff fb70 	bl	8002514 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7ff fb6c 	bl	8002514 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0cb      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	4b49      	ldr	r3, [pc, #292]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ee      	beq.n	8002e38 <HAL_RCC_OscConfig+0x334>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7ff fb5a 	bl	8002514 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7ff fb56 	bl	8002514 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0b5      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ee      	bne.n	8002e64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	4a38      	ldr	r2, [pc, #224]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a1 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ea2:	4b34      	ldr	r3, [pc, #208]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d05c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d141      	bne.n	8002f3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_RCC_OscConfig+0x478>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7ff fb2a 	bl	8002514 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7ff fb26 	bl	8002514 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e087      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	491b      	ldr	r1, [pc, #108]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <HAL_RCC_OscConfig+0x478>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7ff faff 	bl	8002514 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff fafb 	bl	8002514 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e05c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x416>
 8002f38:	e054      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <HAL_RCC_OscConfig+0x478>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7ff fae8 	bl	8002514 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7ff fae4 	bl	8002514 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e045      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x444>
 8002f66:	e03d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e038      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_RCC_OscConfig+0x4ec>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d028      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d121      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0cc      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b68      	ldr	r3, [pc, #416]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d90c      	bls.n	8003030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b65      	ldr	r3, [pc, #404]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a58      	ldr	r2, [pc, #352]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a52      	ldr	r2, [pc, #328]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800306a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d044      	beq.n	8003114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d119      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	4b3f      	ldr	r3, [pc, #252]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c2:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e067      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4b37      	ldr	r3, [pc, #220]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4934      	ldr	r1, [pc, #208]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e4:	f7ff fa16 	bl	8002514 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7ff fa12 	bl	8002514 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e04f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	4b2b      	ldr	r3, [pc, #172]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 020c 	and.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d1eb      	bne.n	80030ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d20c      	bcs.n	800313c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b22      	ldr	r3, [pc, #136]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003166:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f976 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08007af0 	.word	0x08007af0
 80031b8:	20000014 	.word	0x20000014
 80031bc:	20000018 	.word	0x20000018

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b094      	sub	sp, #80	@ 0x50
 80031c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d8:	4b79      	ldr	r3, [pc, #484]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d00d      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x40>
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	f200 80e1 	bhi.w	80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x3a>
 80031f2:	e0db      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b73      	ldr	r3, [pc, #460]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031f8:	e0db      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fa:	4b73      	ldr	r3, [pc, #460]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80031fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031fe:	e0d8      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003200:	4b6f      	ldr	r3, [pc, #444]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003208:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320a:	4b6d      	ldr	r3, [pc, #436]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b6a      	ldr	r3, [pc, #424]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	2200      	movs	r2, #0
 800321e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003220:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
 800322e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	0159      	lsls	r1, r3, #5
 8003240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003244:	0150      	lsls	r0, r2, #5
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4621      	mov	r1, r4
 800324c:	1a51      	subs	r1, r2, r1
 800324e:	6139      	str	r1, [r7, #16]
 8003250:	4629      	mov	r1, r5
 8003252:	eb63 0301 	sbc.w	r3, r3, r1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003264:	4659      	mov	r1, fp
 8003266:	018b      	lsls	r3, r1, #6
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326e:	4651      	mov	r1, sl
 8003270:	018a      	lsls	r2, r1, #6
 8003272:	4651      	mov	r1, sl
 8003274:	ebb2 0801 	subs.w	r8, r2, r1
 8003278:	4659      	mov	r1, fp
 800327a:	eb63 0901 	sbc.w	r9, r3, r1
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003292:	4690      	mov	r8, r2
 8003294:	4699      	mov	r9, r3
 8003296:	4623      	mov	r3, r4
 8003298:	eb18 0303 	adds.w	r3, r8, r3
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	462b      	mov	r3, r5
 80032a0:	eb49 0303 	adc.w	r3, r9, r3
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032b2:	4629      	mov	r1, r5
 80032b4:	024b      	lsls	r3, r1, #9
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032bc:	4621      	mov	r1, r4
 80032be:	024a      	lsls	r2, r1, #9
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032d0:	f7fc ff82 	bl	80001d8 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032dc:	e058      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	4611      	mov	r1, r2
 80032ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0159      	lsls	r1, r3, #5
 8003306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330a:	0150      	lsls	r0, r2, #5
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4641      	mov	r1, r8
 8003312:	ebb2 0a01 	subs.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb63 0b01 	sbc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800332c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003330:	ebb2 040a 	subs.w	r4, r2, sl
 8003334:	eb63 050b 	sbc.w	r5, r3, fp
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	00eb      	lsls	r3, r5, #3
 8003342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003346:	00e2      	lsls	r2, r4, #3
 8003348:	4614      	mov	r4, r2
 800334a:	461d      	mov	r5, r3
 800334c:	4643      	mov	r3, r8
 800334e:	18e3      	adds	r3, r4, r3
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	464b      	mov	r3, r9
 8003354:	eb45 0303 	adc.w	r3, r5, r3
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003366:	4629      	mov	r1, r5
 8003368:	028b      	lsls	r3, r1, #10
 800336a:	4621      	mov	r1, r4
 800336c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003370:	4621      	mov	r1, r4
 8003372:	028a      	lsls	r2, r1, #10
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800337a:	2200      	movs	r2, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	61fa      	str	r2, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	f7fc ff28 	bl	80001d8 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3750      	adds	r7, #80	@ 0x50
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07b      	b.n	80034d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ee:	d009      	beq.n	8003404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
 80033f6:	e005      	b.n	8003404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe feba 	bl	8002198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003488:	ea42 0103 	orr.w	r1, r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f003 0104 	and.w	r1, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	f003 0210 	and.w	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b088      	sub	sp, #32
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ee:	f7ff f811 	bl	8002514 <HAL_GetTick>
 80034f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
 8003506:	e12a      	b.n	800375e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Transmit+0x36>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e122      	b.n	800375e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_SPI_Transmit+0x48>
 8003522:	2302      	movs	r3, #2
 8003524:	e11b      	b.n	800375e <HAL_SPI_Transmit+0x280>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003574:	d10f      	bne.n	8003596 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003584:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003594:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	d007      	beq.n	80035b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035bc:	d152      	bne.n	8003664 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0xee>
 80035c6:	8b7b      	ldrh	r3, [r7, #26]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d145      	bne.n	8003658 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035f0:	e032      	b.n	8003658 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d112      	bne.n	8003626 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003624:	e018      	b.n	8003658 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003626:	f7fe ff75 	bl	8002514 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d803      	bhi.n	800363e <HAL_SPI_Transmit+0x160>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d102      	bne.n	8003644 <HAL_SPI_Transmit+0x166>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e082      	b.n	800375e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1c7      	bne.n	80035f2 <HAL_SPI_Transmit+0x114>
 8003662:	e053      	b.n	800370c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_SPI_Transmit+0x194>
 800366c:	8b7b      	ldrh	r3, [r7, #26]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d147      	bne.n	8003702 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	7812      	ldrb	r2, [r2, #0]
 800367e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003698:	e033      	b.n	8003702 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d113      	bne.n	80036d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036ce:	e018      	b.n	8003702 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d0:	f7fe ff20 	bl	8002514 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d803      	bhi.n	80036e8 <HAL_SPI_Transmit+0x20a>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d102      	bne.n	80036ee <HAL_SPI_Transmit+0x210>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e02d      	b.n	800375e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1c6      	bne.n	800369a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fbd9 	bl	8003ec8 <SPI_EndRxTxTransaction>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800375c:	2300      	movs	r3, #0
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b088      	sub	sp, #32
 800376a:	af02      	add	r7, sp, #8
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d001      	beq.n	8003786 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	e104      	b.n	8003990 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800378e:	d112      	bne.n	80037b6 <HAL_SPI_Receive+0x50>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10e      	bne.n	80037b6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2204      	movs	r2, #4
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8f3 	bl	8003998 <HAL_SPI_TransmitReceive>
 80037b2:	4603      	mov	r3, r0
 80037b4:	e0ec      	b.n	8003990 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b6:	f7fe fead 	bl	8002514 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Receive+0x62>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0e1      	b.n	8003990 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_SPI_Receive+0x74>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0da      	b.n	8003990 <HAL_SPI_Receive+0x22a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2204      	movs	r2, #4
 80037e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	88fa      	ldrh	r2, [r7, #6]
 80037fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003828:	d10f      	bne.n	800384a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003854:	2b40      	cmp	r3, #64	@ 0x40
 8003856:	d007      	beq.n	8003868 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d170      	bne.n	8003952 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003870:	e035      	b.n	80038de <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d115      	bne.n	80038ac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f103 020c 	add.w	r2, r3, #12
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038aa:	e018      	b.n	80038de <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ac:	f7fe fe32 	bl	8002514 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d803      	bhi.n	80038c4 <HAL_SPI_Receive+0x15e>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d102      	bne.n	80038ca <HAL_SPI_Receive+0x164>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e058      	b.n	8003990 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1c4      	bne.n	8003872 <HAL_SPI_Receive+0x10c>
 80038e8:	e038      	b.n	800395c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d113      	bne.n	8003920 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	b292      	uxth	r2, r2
 8003904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800391e:	e018      	b.n	8003952 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003920:	f7fe fdf8 	bl	8002514 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d803      	bhi.n	8003938 <HAL_SPI_Receive+0x1d2>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d102      	bne.n	800393e <HAL_SPI_Receive+0x1d8>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e01e      	b.n	8003990 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1c6      	bne.n	80038ea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fa4b 	bl	8003dfc <SPI_EndRxTransaction>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800398e:	2300      	movs	r3, #0
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039a6:	2301      	movs	r3, #1
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039aa:	f7fe fdb3 	bl	8002514 <HAL_GetTick>
 80039ae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039b6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d00c      	beq.n	80039e2 <HAL_SPI_TransmitReceive+0x4a>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ce:	d106      	bne.n	80039de <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_SPI_TransmitReceive+0x46>
 80039d8:	7ffb      	ldrb	r3, [r7, #31]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d001      	beq.n	80039e2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	e17f      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x5c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x5c>
 80039ee:	887b      	ldrh	r3, [r7, #2]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e174      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x6e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e16d      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	887a      	ldrh	r2, [r7, #2]
 8003a4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a62:	2b40      	cmp	r3, #64	@ 0x40
 8003a64:	d007      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a7e:	d17e      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0xf6>
 8003a88:	8afb      	ldrh	r3, [r7, #22]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d16c      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab2:	e059      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d11b      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x162>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d016      	beq.n	8003afa <HAL_SPI_TransmitReceive+0x162>
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d113      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d119      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x1a4>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d014      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	1c9a      	adds	r2, r3, #2
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b3c:	f7fe fcea 	bl	8002514 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d80d      	bhi.n	8003b68 <HAL_SPI_TransmitReceive+0x1d0>
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d009      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0bc      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1a0      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x11c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d19b      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x11c>
 8003b7c:	e082      	b.n	8003c84 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x1f4>
 8003b86:	8afb      	ldrh	r3, [r7, #22]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d171      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb2:	e05d      	b.n	8003c70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d11c      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x264>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d017      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x264>
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d114      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d119      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x2a6>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d014      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c3e:	f7fe fc69 	bl	8002514 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d803      	bhi.n	8003c56 <HAL_SPI_TransmitReceive+0x2be>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d102      	bne.n	8003c5c <HAL_SPI_TransmitReceive+0x2c4>
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e038      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d19c      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x21c>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d197      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c84:	6a3a      	ldr	r2, [r7, #32]
 8003c86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f91d 	bl	8003ec8 <SPI_EndRxTxTransaction>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e01d      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3728      	adds	r7, #40	@ 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cfc:	f7fe fc0a 	bl	8002514 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d0c:	f7fe fc02 	bl	8002514 <HAL_GetTick>
 8003d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d12:	4b39      	ldr	r3, [pc, #228]	@ (8003df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	015b      	lsls	r3, r3, #5
 8003d18:	0d1b      	lsrs	r3, r3, #20
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d22:	e054      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d050      	beq.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2c:	f7fe fbf2 	bl	8002514 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d902      	bls.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d13d      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d5a:	d111      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d64:	d004      	beq.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d107      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d88:	d10f      	bne.n	8003daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e017      	b.n	8003dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d19b      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000014 	.word	0x20000014

08003dfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e10:	d111      	bne.n	8003e36 <SPI_EndRxTransaction+0x3a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e1a:	d004      	beq.n	8003e26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e24:	d107      	bne.n	8003e36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e3e:	d12a      	bne.n	8003e96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e48:	d012      	beq.n	8003e70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	2180      	movs	r1, #128	@ 0x80
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ff49 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02d      	beq.n	8003ebc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e026      	b.n	8003ebe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2101      	movs	r1, #1
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff36 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01a      	beq.n	8003ebc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e013      	b.n	8003ebe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ff23 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e000      	b.n	8003ebe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2201      	movs	r2, #1
 8003edc:	2102      	movs	r1, #2
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff ff04 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e032      	b.n	8003f60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003efa:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <SPI_EndRxTxTransaction+0xa0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <SPI_EndRxTxTransaction+0xa4>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	0d5b      	lsrs	r3, r3, #21
 8003f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f18:	d112      	bne.n	8003f40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	@ 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fee1 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e00f      	b.n	8003f60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f56:	2b80      	cmp	r3, #128	@ 0x80
 8003f58:	d0f2      	beq.n	8003f40 <SPI_EndRxTxTransaction+0x78>
 8003f5a:	e000      	b.n	8003f5e <SPI_EndRxTxTransaction+0x96>
        break;
 8003f5c:	bf00      	nop
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000014 	.word	0x20000014
 8003f6c:	165e9f81 	.word	0x165e9f81

08003f70 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e038      	b.n	8003ff8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7fc fe60 	bl	8000c60 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fc9e 	bl	80048ec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	f000 fd00 	bl	80049c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6858      	ldr	r0, [r3, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	f000 fd2d 	bl	8004a2c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	6892      	ldr	r2, [r2, #8]
 8003fda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	f041 0101 	orr.w	r1, r1, #1
 8003fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e041      	b.n	8004096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe f9be 	bl	80023a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f000 fa7e 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d001      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e04e      	b.n	8004156 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <HAL_TIM_Base_Start_IT+0xc4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d022      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d01d      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004168 <HAL_TIM_Base_Start_IT+0xc8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d018      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <HAL_TIM_Base_Start_IT+0xcc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <HAL_TIM_Base_Start_IT+0xd0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <HAL_TIM_Base_Start_IT+0xd4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	@ (8004178 <HAL_TIM_Base_Start_IT+0xd8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x80>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a18      	ldr	r2, [pc, #96]	@ (800417c <HAL_TIM_Base_Start_IT+0xdc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d111      	bne.n	8004144 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b06      	cmp	r3, #6
 8004130:	d010      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	e007      	b.n	8004154 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40001800 	.word	0x40001800

08004180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d020      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0202 	mvn.w	r2, #2
 80041b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f999 	bl	8004502 <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f98b 	bl	80044ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f99c 	bl	8004516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0204 	mvn.w	r2, #4
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f973 	bl	8004502 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f965 	bl	80044ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f976 	bl	8004516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d020      	beq.n	800427c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0208 	mvn.w	r2, #8
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2204      	movs	r2, #4
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f94d 	bl	8004502 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f93f 	bl	80044ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f950 	bl	8004516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0210 	mvn.w	r2, #16
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2208      	movs	r2, #8
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f927 	bl	8004502 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f919 	bl	80044ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f92a 	bl	8004516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0201 	mvn.w	r2, #1
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fec0 	bl	800206c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00c      	beq.n	8004310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fae4 	bl	80048d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8fb 	bl	800452a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0220 	mvn.w	r2, #32
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fab6 	bl	80048c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIM_ConfigClockSource+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e0b4      	b.n	80044e6 <HAL_TIM_ConfigClockSource+0x186>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800439a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b4:	d03e      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0xd4>
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ba:	f200 8087 	bhi.w	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c2:	f000 8086 	beq.w	80044d2 <HAL_TIM_ConfigClockSource+0x172>
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ca:	d87f      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b70      	cmp	r3, #112	@ 0x70
 80043ce:	d01a      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0xa6>
 80043d0:	2b70      	cmp	r3, #112	@ 0x70
 80043d2:	d87b      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b60      	cmp	r3, #96	@ 0x60
 80043d6:	d050      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x11a>
 80043d8:	2b60      	cmp	r3, #96	@ 0x60
 80043da:	d877      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b50      	cmp	r3, #80	@ 0x50
 80043de:	d03c      	beq.n	800445a <HAL_TIM_ConfigClockSource+0xfa>
 80043e0:	2b50      	cmp	r3, #80	@ 0x50
 80043e2:	d873      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	d058      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x13a>
 80043e8:	2b40      	cmp	r3, #64	@ 0x40
 80043ea:	d86f      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b30      	cmp	r3, #48	@ 0x30
 80043ee:	d064      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 80043f0:	2b30      	cmp	r3, #48	@ 0x30
 80043f2:	d86b      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d060      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d867      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05c      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 8004400:	2b10      	cmp	r3, #16
 8004402:	d05a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x15a>
 8004404:	e062      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004416:	f000 f9b9 	bl	800478c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	609a      	str	r2, [r3, #8]
      break;
 8004432:	e04f      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004444:	f000 f9a2 	bl	800478c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004456:	609a      	str	r2, [r3, #8]
      break;
 8004458:	e03c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004466:	461a      	mov	r2, r3
 8004468:	f000 f916 	bl	8004698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2150      	movs	r1, #80	@ 0x50
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f96f 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8004478:	e02c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004486:	461a      	mov	r2, r3
 8004488:	f000 f935 	bl	80046f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2160      	movs	r1, #96	@ 0x60
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f95f 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8004498:	e01c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a6:	461a      	mov	r2, r3
 80044a8:	f000 f8f6 	bl	8004698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2140      	movs	r1, #64	@ 0x40
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f94f 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80044b8:	e00c      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f000 f946 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a46      	ldr	r2, [pc, #280]	@ (800466c <TIM_Base_SetConfig+0x12c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455e:	d00f      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a43      	ldr	r2, [pc, #268]	@ (8004670 <TIM_Base_SetConfig+0x130>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00b      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <TIM_Base_SetConfig+0x134>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a41      	ldr	r2, [pc, #260]	@ (8004678 <TIM_Base_SetConfig+0x138>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a40      	ldr	r2, [pc, #256]	@ (800467c <TIM_Base_SetConfig+0x13c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d108      	bne.n	8004592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a35      	ldr	r2, [pc, #212]	@ (800466c <TIM_Base_SetConfig+0x12c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d02b      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a0:	d027      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a32      	ldr	r2, [pc, #200]	@ (8004670 <TIM_Base_SetConfig+0x130>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d023      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a31      	ldr	r2, [pc, #196]	@ (8004674 <TIM_Base_SetConfig+0x134>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01f      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a30      	ldr	r2, [pc, #192]	@ (8004678 <TIM_Base_SetConfig+0x138>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01b      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2f      	ldr	r2, [pc, #188]	@ (800467c <TIM_Base_SetConfig+0x13c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d017      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004680 <TIM_Base_SetConfig+0x140>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <TIM_Base_SetConfig+0x144>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00f      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004688 <TIM_Base_SetConfig+0x148>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2b      	ldr	r2, [pc, #172]	@ (800468c <TIM_Base_SetConfig+0x14c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <TIM_Base_SetConfig+0x150>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a29      	ldr	r2, [pc, #164]	@ (8004694 <TIM_Base_SetConfig+0x154>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d108      	bne.n	8004604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a10      	ldr	r2, [pc, #64]	@ (800466c <TIM_Base_SetConfig+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0xf8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a12      	ldr	r2, [pc, #72]	@ (800467c <TIM_Base_SetConfig+0x13c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f023 0201 	bic.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]
  }
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40010400 	.word	0x40010400
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800
 800468c:	40001800 	.word	0x40001800
 8004690:	40001c00 	.word	0x40001c00
 8004694:	40002000 	.word	0x40002000

08004698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0201 	bic.w	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 030a 	bic.w	r3, r3, #10
 80046d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b087      	sub	sp, #28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f023 0210 	bic.w	r2, r3, #16
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	031b      	lsls	r3, r3, #12
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004732:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	f043 0307 	orr.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e05a      	b.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004830:	d01d      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10c      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40010400 	.word	0x40010400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40001800 	.word	0x40001800

080048c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	f023 0101 	bic.w	r1, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b08      	cmp	r3, #8
 8004914:	d102      	bne.n	800491c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004916:	2340      	movs	r3, #64	@ 0x40
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e001      	b.n	8004920 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800492c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004932:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004938:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800493e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004944:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800494a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8004950:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8004956:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800495c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800497a:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <FSMC_NORSRAM_Init+0xd0>)
 800497c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004984:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800498c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	43db      	mvns	r3, r3
 800499c:	ea02 0103 	and.w	r1, r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4319      	orrs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	0008fb7f 	.word	0x0008fb7f

080049c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	051b      	lsls	r3, r3, #20
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	3b02      	subs	r3, #2
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	3201      	adds	r2, #1
 8004a14:	4319      	orrs	r1, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a40:	d11d      	bne.n	8004a7e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a4a:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	6811      	ldr	r1, [r2, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	6852      	ldr	r2, [r2, #4]
 8004a56:	0112      	lsls	r2, r2, #4
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	0212      	lsls	r2, r2, #8
 8004a60:	4311      	orrs	r1, r2
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	6992      	ldr	r2, [r2, #24]
 8004a66:	4311      	orrs	r1, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	68d2      	ldr	r2, [r2, #12]
 8004a6c:	0412      	lsls	r2, r2, #16
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	ea43 0102 	orr.w	r1, r3, r2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004a7c:	e005      	b.n	8004a8a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	cff00000 	.word	0xcff00000

08004a9c <memset>:
 8004a9c:	4402      	add	r2, r0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d100      	bne.n	8004aa6 <memset+0xa>
 8004aa4:	4770      	bx	lr
 8004aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aaa:	e7f9      	b.n	8004aa0 <memset+0x4>

08004aac <__libc_init_array>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4d0d      	ldr	r5, [pc, #52]	@ (8004ae4 <__libc_init_array+0x38>)
 8004ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae8 <__libc_init_array+0x3c>)
 8004ab2:	1b64      	subs	r4, r4, r5
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d109      	bne.n	8004ad0 <__libc_init_array+0x24>
 8004abc:	4d0b      	ldr	r5, [pc, #44]	@ (8004aec <__libc_init_array+0x40>)
 8004abe:	4c0c      	ldr	r4, [pc, #48]	@ (8004af0 <__libc_init_array+0x44>)
 8004ac0:	f000 f818 	bl	8004af4 <_init>
 8004ac4:	1b64      	subs	r4, r4, r5
 8004ac6:	10a4      	asrs	r4, r4, #2
 8004ac8:	2600      	movs	r6, #0
 8004aca:	42a6      	cmp	r6, r4
 8004acc:	d105      	bne.n	8004ada <__libc_init_array+0x2e>
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad4:	4798      	blx	r3
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__libc_init_array+0xc>
 8004ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ade:	4798      	blx	r3
 8004ae0:	3601      	adds	r6, #1
 8004ae2:	e7f2      	b.n	8004aca <__libc_init_array+0x1e>
 8004ae4:	08007b08 	.word	0x08007b08
 8004ae8:	08007b08 	.word	0x08007b08
 8004aec:	08007b08 	.word	0x08007b08
 8004af0:	08007b0c 	.word	0x08007b0c

08004af4 <_init>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr

08004b00 <_fini>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr
